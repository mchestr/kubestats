"""initial

Revision ID: a431674157c5
Revises:
Create Date: 2025-06-01 13:01:42.412271

"""

from alembic import op
import sqlalchemy as sa
import sqlmodel.sql.sqltypes


# revision identifiers, used by Alembic.
revision = "a431674157c5"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "repository",
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
        sa.Column(
            "full_name", sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False
        ),
        sa.Column(
            "owner", sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False
        ),
        sa.Column(
            "description", sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=True
        ),
        sa.Column(
            "language", sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True
        ),
        sa.Column("topics", sa.JSON(), nullable=True),
        sa.Column(
            "license_name", sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True
        ),
        sa.Column(
            "default_branch",
            sqlmodel.sql.sqltypes.AutoString(length=100),
            nullable=False,
        ),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("discovery_tags", sa.JSON(), nullable=True),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("github_id", sa.Integer(), nullable=False),
        sa.Column("discovered_at", sa.DateTime(), nullable=False),
        sa.Column("last_sync_at", sa.DateTime(), nullable=True),
        sa.Column(
            "sync_status",
            sa.Enum(
                "PENDING",
                "SYNCING",
                "SUCCESS",
                "ERROR",
                "BLOCKED",
                "PENDING_APPROVAL",
                name="syncstatus",
            ),
            nullable=False,
        ),
        sa.Column(
            "sync_error", sqlmodel.sql.sqltypes.AutoString(length=2000), nullable=True
        ),
        sa.Column(
            "working_directory_path",
            sqlmodel.sql.sqltypes.AutoString(length=500),
            nullable=True,
        ),
        sa.Column("last_scan_at", sa.DateTime(), nullable=True),
        sa.Column(
            "scan_status",
            sa.Enum(
                "PENDING",
                "SYNCING",
                "SUCCESS",
                "ERROR",
                "BLOCKED",
                "PENDING_APPROVAL",
                name="syncstatus",
            ),
            nullable=False,
        ),
        sa.Column(
            "scan_error", sqlmodel.sql.sqltypes.AutoString(length=2000), nullable=True
        ),
        sa.Column("last_scan_total_resources", sa.Integer(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_repository_full_name"), "repository", ["full_name"], unique=False
    )
    op.create_index(
        op.f("ix_repository_github_id"), "repository", ["github_id"], unique=True
    )
    op.create_index(
        op.f("ix_repository_last_scan_at"), "repository", ["last_scan_at"], unique=False
    )
    op.create_index(
        op.f("ix_repository_last_sync_at"), "repository", ["last_sync_at"], unique=False
    )
    op.create_index(op.f("ix_repository_owner"), "repository", ["owner"], unique=False)
    op.create_index(
        op.f("ix_repository_scan_status"), "repository", ["scan_status"], unique=False
    )
    op.create_index(
        op.f("ix_repository_sync_status"), "repository", ["sync_status"], unique=False
    )
    op.create_table(
        "user",
        sa.Column(
            "email", sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False
        ),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("is_superuser", sa.Boolean(), nullable=False),
        sa.Column(
            "full_name", sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True
        ),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "hashed_password", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_user_email"), "user", ["email"], unique=True)
    op.create_table(
        "kubernetesresource",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("repository_id", sa.Uuid(), nullable=False),
        sa.Column(
            "api_version", sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False
        ),
        sa.Column("kind", sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
        sa.Column(
            "namespace", sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True
        ),
        sa.Column(
            "file_path", sqlmodel.sql.sqltypes.AutoString(length=500), nullable=False
        ),
        sa.Column(
            "file_hash", sqlmodel.sql.sqltypes.AutoString(length=64), nullable=False
        ),
        sa.Column(
            "version", sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True
        ),
        sa.Column("data", sa.JSON(), nullable=True),
        sa.Column(
            "status", sqlmodel.sql.sqltypes.AutoString(length=20), nullable=False
        ),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["repository_id"], ["repository.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "repository_id",
            "api_version",
            "kind",
            "name",
            "namespace",
            name="uq_kubernetes_resource_per_repo",
        ),
    )
    op.create_index(
        op.f("ix_kubernetesresource_api_version"),
        "kubernetesresource",
        ["api_version"],
        unique=False,
    )
    op.create_index(
        op.f("ix_kubernetesresource_created_at"),
        "kubernetesresource",
        ["created_at"],
        unique=False,
    )
    op.create_index(
        op.f("ix_kubernetesresource_deleted_at"),
        "kubernetesresource",
        ["deleted_at"],
        unique=False,
    )
    op.create_index(
        op.f("ix_kubernetesresource_kind"), "kubernetesresource", ["kind"], unique=False
    )
    op.create_index(
        op.f("ix_kubernetesresource_name"), "kubernetesresource", ["name"], unique=False
    )
    op.create_index(
        op.f("ix_kubernetesresource_namespace"),
        "kubernetesresource",
        ["namespace"],
        unique=False,
    )
    op.create_index(
        op.f("ix_kubernetesresource_repository_id"),
        "kubernetesresource",
        ["repository_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_kubernetesresource_status"),
        "kubernetesresource",
        ["status"],
        unique=False,
    )
    op.create_index(
        op.f("ix_kubernetesresource_updated_at"),
        "kubernetesresource",
        ["updated_at"],
        unique=False,
    )
    op.create_table(
        "repositorymetrics",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("repository_id", sa.Uuid(), nullable=False),
        sa.Column("stars_count", sa.Integer(), nullable=False),
        sa.Column("forks_count", sa.Integer(), nullable=False),
        sa.Column("watchers_count", sa.Integer(), nullable=False),
        sa.Column("open_issues_count", sa.Integer(), nullable=False),
        sa.Column("size", sa.Integer(), nullable=False),
        sa.Column("kubernetes_resources_count", sa.Integer(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("pushed_at", sa.DateTime(), nullable=True),
        sa.Column("recorded_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["repository_id"], ["repository.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_repositorymetrics_recorded_at"),
        "repositorymetrics",
        ["recorded_at"],
        unique=False,
    )
    op.create_table(
        "kubernetesresourceevent",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("resource_id", sa.Uuid(), nullable=False),
        sa.Column("repository_id", sa.Uuid(), nullable=False),
        sa.Column(
            "event_type", sqlmodel.sql.sqltypes.AutoString(length=20), nullable=False
        ),
        sa.Column("event_timestamp", sa.DateTime(), nullable=False),
        sa.Column(
            "resource_name",
            sqlmodel.sql.sqltypes.AutoString(length=255),
            nullable=False,
        ),
        sa.Column(
            "resource_namespace",
            sqlmodel.sql.sqltypes.AutoString(length=255),
            nullable=True,
        ),
        sa.Column(
            "resource_kind",
            sqlmodel.sql.sqltypes.AutoString(length=100),
            nullable=False,
        ),
        sa.Column(
            "resource_api_version",
            sqlmodel.sql.sqltypes.AutoString(length=100),
            nullable=False,
        ),
        sa.Column(
            "file_path", sqlmodel.sql.sqltypes.AutoString(length=500), nullable=False
        ),
        sa.Column(
            "file_hash_before",
            sqlmodel.sql.sqltypes.AutoString(length=64),
            nullable=True,
        ),
        sa.Column(
            "file_hash_after",
            sqlmodel.sql.sqltypes.AutoString(length=64),
            nullable=True,
        ),
        sa.Column("changes_detected", sa.JSON(), nullable=True),
        sa.Column("resource_data", sa.JSON(), nullable=True),
        sa.Column("sync_run_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(
            ["repository_id"], ["repository.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["resource_id"], ["kubernetesresource.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_kubernetesresourceevent_event_timestamp"),
        "kubernetesresourceevent",
        ["event_timestamp"],
        unique=False,
    )
    op.create_index(
        op.f("ix_kubernetesresourceevent_event_type"),
        "kubernetesresourceevent",
        ["event_type"],
        unique=False,
    )
    op.create_index(
        op.f("ix_kubernetesresourceevent_repository_id"),
        "kubernetesresourceevent",
        ["repository_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_kubernetesresourceevent_resource_api_version"),
        "kubernetesresourceevent",
        ["resource_api_version"],
        unique=False,
    )
    op.create_index(
        op.f("ix_kubernetesresourceevent_resource_id"),
        "kubernetesresourceevent",
        ["resource_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_kubernetesresourceevent_resource_kind"),
        "kubernetesresourceevent",
        ["resource_kind"],
        unique=False,
    )
    op.create_index(
        op.f("ix_kubernetesresourceevent_resource_name"),
        "kubernetesresourceevent",
        ["resource_name"],
        unique=False,
    )
    op.create_index(
        op.f("ix_kubernetesresourceevent_resource_namespace"),
        "kubernetesresourceevent",
        ["resource_namespace"],
        unique=False,
    )
    op.create_index(
        op.f("ix_kubernetesresourceevent_sync_run_id"),
        "kubernetesresourceevent",
        ["sync_run_id"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("ix_kubernetesresourceevent_sync_run_id"),
        table_name="kubernetesresourceevent",
    )
    op.drop_index(
        op.f("ix_kubernetesresourceevent_resource_namespace"),
        table_name="kubernetesresourceevent",
    )
    op.drop_index(
        op.f("ix_kubernetesresourceevent_resource_name"),
        table_name="kubernetesresourceevent",
    )
    op.drop_index(
        op.f("ix_kubernetesresourceevent_resource_kind"),
        table_name="kubernetesresourceevent",
    )
    op.drop_index(
        op.f("ix_kubernetesresourceevent_resource_id"),
        table_name="kubernetesresourceevent",
    )
    op.drop_index(
        op.f("ix_kubernetesresourceevent_resource_api_version"),
        table_name="kubernetesresourceevent",
    )
    op.drop_index(
        op.f("ix_kubernetesresourceevent_repository_id"),
        table_name="kubernetesresourceevent",
    )
    op.drop_index(
        op.f("ix_kubernetesresourceevent_event_type"),
        table_name="kubernetesresourceevent",
    )
    op.drop_index(
        op.f("ix_kubernetesresourceevent_event_timestamp"),
        table_name="kubernetesresourceevent",
    )
    op.drop_table("kubernetesresourceevent")
    op.drop_index(
        op.f("ix_repositorymetrics_recorded_at"), table_name="repositorymetrics"
    )
    op.drop_table("repositorymetrics")
    op.drop_index(
        op.f("ix_kubernetesresource_updated_at"), table_name="kubernetesresource"
    )
    op.drop_index(op.f("ix_kubernetesresource_status"), table_name="kubernetesresource")
    op.drop_index(
        op.f("ix_kubernetesresource_repository_id"), table_name="kubernetesresource"
    )
    op.drop_index(
        op.f("ix_kubernetesresource_namespace"), table_name="kubernetesresource"
    )
    op.drop_index(op.f("ix_kubernetesresource_name"), table_name="kubernetesresource")
    op.drop_index(op.f("ix_kubernetesresource_kind"), table_name="kubernetesresource")
    op.drop_index(
        op.f("ix_kubernetesresource_deleted_at"), table_name="kubernetesresource"
    )
    op.drop_index(
        op.f("ix_kubernetesresource_created_at"), table_name="kubernetesresource"
    )
    op.drop_index(
        op.f("ix_kubernetesresource_api_version"), table_name="kubernetesresource"
    )
    op.drop_table("kubernetesresource")
    op.drop_index(op.f("ix_user_email"), table_name="user")
    op.drop_table("user")
    op.drop_index(op.f("ix_repository_sync_status"), table_name="repository")
    op.drop_index(op.f("ix_repository_scan_status"), table_name="repository")
    op.drop_index(op.f("ix_repository_owner"), table_name="repository")
    op.drop_index(op.f("ix_repository_last_sync_at"), table_name="repository")
    op.drop_index(op.f("ix_repository_last_scan_at"), table_name="repository")
    op.drop_index(op.f("ix_repository_github_id"), table_name="repository")
    op.drop_index(op.f("ix_repository_full_name"), table_name="repository")
    op.drop_table("repository")

    op.execute("DROP TYPE syncstatus")
    # ### end Alembic commands ###
