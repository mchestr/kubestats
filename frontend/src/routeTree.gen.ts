/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as LayoutRouteImport } from './routes/_layout'
import { Route as LayoutIndexRouteImport } from './routes/_layout/index'
import { Route as LayoutTasksRouteImport } from './routes/_layout/tasks'
import { Route as LayoutResourcesRouteImport } from './routes/_layout/resources'
import { Route as LayoutRepositoriesRouteImport } from './routes/_layout/repositories'
import { Route as LayoutEcosystemRouteImport } from './routes/_layout/ecosystem'
import { Route as LayoutRepositoriesIndexRouteImport } from './routes/_layout/repositories/index'
import { Route as LayoutRepositoriesRepositoryIdRouteImport } from './routes/_layout/repositories/$repositoryId'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutRoute = LayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutIndexRoute = LayoutIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutTasksRoute = LayoutTasksRouteImport.update({
  id: '/tasks',
  path: '/tasks',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutResourcesRoute = LayoutResourcesRouteImport.update({
  id: '/resources',
  path: '/resources',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutRepositoriesRoute = LayoutRepositoriesRouteImport.update({
  id: '/repositories',
  path: '/repositories',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutEcosystemRoute = LayoutEcosystemRouteImport.update({
  id: '/ecosystem',
  path: '/ecosystem',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutRepositoriesIndexRoute = LayoutRepositoriesIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRepositoriesRoute,
} as any)
const LayoutRepositoriesRepositoryIdRoute =
  LayoutRepositoriesRepositoryIdRouteImport.update({
    id: '/$repositoryId',
    path: '/$repositoryId',
    getParentRoute: () => LayoutRepositoriesRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/login': typeof LoginRoute
  '/ecosystem': typeof LayoutEcosystemRoute
  '/repositories': typeof LayoutRepositoriesRouteWithChildren
  '/resources': typeof LayoutResourcesRoute
  '/tasks': typeof LayoutTasksRoute
  '/': typeof LayoutIndexRoute
  '/repositories/$repositoryId': typeof LayoutRepositoriesRepositoryIdRoute
  '/repositories/': typeof LayoutRepositoriesIndexRoute
}
export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/ecosystem': typeof LayoutEcosystemRoute
  '/resources': typeof LayoutResourcesRoute
  '/tasks': typeof LayoutTasksRoute
  '/': typeof LayoutIndexRoute
  '/repositories/$repositoryId': typeof LayoutRepositoriesRepositoryIdRoute
  '/repositories': typeof LayoutRepositoriesIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_layout': typeof LayoutRouteWithChildren
  '/login': typeof LoginRoute
  '/_layout/ecosystem': typeof LayoutEcosystemRoute
  '/_layout/repositories': typeof LayoutRepositoriesRouteWithChildren
  '/_layout/resources': typeof LayoutResourcesRoute
  '/_layout/tasks': typeof LayoutTasksRoute
  '/_layout/': typeof LayoutIndexRoute
  '/_layout/repositories/$repositoryId': typeof LayoutRepositoriesRepositoryIdRoute
  '/_layout/repositories/': typeof LayoutRepositoriesIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/login'
    | '/ecosystem'
    | '/repositories'
    | '/resources'
    | '/tasks'
    | '/'
    | '/repositories/$repositoryId'
    | '/repositories/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/ecosystem'
    | '/resources'
    | '/tasks'
    | '/'
    | '/repositories/$repositoryId'
    | '/repositories'
  id:
    | '__root__'
    | '/_layout'
    | '/login'
    | '/_layout/ecosystem'
    | '/_layout/repositories'
    | '/_layout/resources'
    | '/_layout/tasks'
    | '/_layout/'
    | '/_layout/repositories/$repositoryId'
    | '/_layout/repositories/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/tasks': {
      id: '/_layout/tasks'
      path: '/tasks'
      fullPath: '/tasks'
      preLoaderRoute: typeof LayoutTasksRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/resources': {
      id: '/_layout/resources'
      path: '/resources'
      fullPath: '/resources'
      preLoaderRoute: typeof LayoutResourcesRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/repositories': {
      id: '/_layout/repositories'
      path: '/repositories'
      fullPath: '/repositories'
      preLoaderRoute: typeof LayoutRepositoriesRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/ecosystem': {
      id: '/_layout/ecosystem'
      path: '/ecosystem'
      fullPath: '/ecosystem'
      preLoaderRoute: typeof LayoutEcosystemRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/repositories/': {
      id: '/_layout/repositories/'
      path: '/'
      fullPath: '/repositories/'
      preLoaderRoute: typeof LayoutRepositoriesIndexRouteImport
      parentRoute: typeof LayoutRepositoriesRoute
    }
    '/_layout/repositories/$repositoryId': {
      id: '/_layout/repositories/$repositoryId'
      path: '/$repositoryId'
      fullPath: '/repositories/$repositoryId'
      preLoaderRoute: typeof LayoutRepositoriesRepositoryIdRouteImport
      parentRoute: typeof LayoutRepositoriesRoute
    }
  }
}

interface LayoutRepositoriesRouteChildren {
  LayoutRepositoriesRepositoryIdRoute: typeof LayoutRepositoriesRepositoryIdRoute
  LayoutRepositoriesIndexRoute: typeof LayoutRepositoriesIndexRoute
}

const LayoutRepositoriesRouteChildren: LayoutRepositoriesRouteChildren = {
  LayoutRepositoriesRepositoryIdRoute: LayoutRepositoriesRepositoryIdRoute,
  LayoutRepositoriesIndexRoute: LayoutRepositoriesIndexRoute,
}

const LayoutRepositoriesRouteWithChildren =
  LayoutRepositoriesRoute._addFileChildren(LayoutRepositoriesRouteChildren)

interface LayoutRouteChildren {
  LayoutEcosystemRoute: typeof LayoutEcosystemRoute
  LayoutRepositoriesRoute: typeof LayoutRepositoriesRouteWithChildren
  LayoutResourcesRoute: typeof LayoutResourcesRoute
  LayoutTasksRoute: typeof LayoutTasksRoute
  LayoutIndexRoute: typeof LayoutIndexRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutEcosystemRoute: LayoutEcosystemRoute,
  LayoutRepositoriesRoute: LayoutRepositoriesRouteWithChildren,
  LayoutResourcesRoute: LayoutResourcesRoute,
  LayoutTasksRoute: LayoutTasksRoute,
  LayoutIndexRoute: LayoutIndexRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
