/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as LayoutImport } from './routes/_layout'
import { Route as LayoutIndexImport } from './routes/_layout/index'
import { Route as LayoutTasksImport } from './routes/_layout/tasks'
import { Route as LayoutSettingsImport } from './routes/_layout/settings'
import { Route as LayoutRepositoriesImport } from './routes/_layout/repositories'
import { Route as LayoutAdminImport } from './routes/_layout/admin'
import { Route as LayoutRepositoriesIndexImport } from './routes/_layout/repositories/index'
import { Route as LayoutRepositoriesRepositoryIdImport } from './routes/_layout/repositories/$repositoryId'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const LayoutIndexRoute = LayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutTasksRoute = LayoutTasksImport.update({
  id: '/tasks',
  path: '/tasks',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutSettingsRoute = LayoutSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutRepositoriesRoute = LayoutRepositoriesImport.update({
  id: '/repositories',
  path: '/repositories',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutAdminRoute = LayoutAdminImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutRepositoriesIndexRoute = LayoutRepositoriesIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRepositoriesRoute,
} as any)

const LayoutRepositoriesRepositoryIdRoute =
  LayoutRepositoriesRepositoryIdImport.update({
    id: '/$repositoryId',
    path: '/$repositoryId',
    getParentRoute: () => LayoutRepositoriesRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/_layout/admin': {
      id: '/_layout/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof LayoutAdminImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/repositories': {
      id: '/_layout/repositories'
      path: '/repositories'
      fullPath: '/repositories'
      preLoaderRoute: typeof LayoutRepositoriesImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/settings': {
      id: '/_layout/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof LayoutSettingsImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/tasks': {
      id: '/_layout/tasks'
      path: '/tasks'
      fullPath: '/tasks'
      preLoaderRoute: typeof LayoutTasksImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/repositories/$repositoryId': {
      id: '/_layout/repositories/$repositoryId'
      path: '/$repositoryId'
      fullPath: '/repositories/$repositoryId'
      preLoaderRoute: typeof LayoutRepositoriesRepositoryIdImport
      parentRoute: typeof LayoutRepositoriesImport
    }
    '/_layout/repositories/': {
      id: '/_layout/repositories/'
      path: '/'
      fullPath: '/repositories/'
      preLoaderRoute: typeof LayoutRepositoriesIndexImport
      parentRoute: typeof LayoutRepositoriesImport
    }
  }
}

// Create and export the route tree

interface LayoutRepositoriesRouteChildren {
  LayoutRepositoriesRepositoryIdRoute: typeof LayoutRepositoriesRepositoryIdRoute
  LayoutRepositoriesIndexRoute: typeof LayoutRepositoriesIndexRoute
}

const LayoutRepositoriesRouteChildren: LayoutRepositoriesRouteChildren = {
  LayoutRepositoriesRepositoryIdRoute: LayoutRepositoriesRepositoryIdRoute,
  LayoutRepositoriesIndexRoute: LayoutRepositoriesIndexRoute,
}

const LayoutRepositoriesRouteWithChildren =
  LayoutRepositoriesRoute._addFileChildren(LayoutRepositoriesRouteChildren)

interface LayoutRouteChildren {
  LayoutAdminRoute: typeof LayoutAdminRoute
  LayoutRepositoriesRoute: typeof LayoutRepositoriesRouteWithChildren
  LayoutSettingsRoute: typeof LayoutSettingsRoute
  LayoutTasksRoute: typeof LayoutTasksRoute
  LayoutIndexRoute: typeof LayoutIndexRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutAdminRoute: LayoutAdminRoute,
  LayoutRepositoriesRoute: LayoutRepositoriesRouteWithChildren,
  LayoutSettingsRoute: LayoutSettingsRoute,
  LayoutTasksRoute: LayoutTasksRoute,
  LayoutIndexRoute: LayoutIndexRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof LayoutRouteWithChildren
  '/login': typeof LoginRoute
  '/admin': typeof LayoutAdminRoute
  '/repositories': typeof LayoutRepositoriesRouteWithChildren
  '/settings': typeof LayoutSettingsRoute
  '/tasks': typeof LayoutTasksRoute
  '/': typeof LayoutIndexRoute
  '/repositories/$repositoryId': typeof LayoutRepositoriesRepositoryIdRoute
  '/repositories/': typeof LayoutRepositoriesIndexRoute
}

export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/admin': typeof LayoutAdminRoute
  '/settings': typeof LayoutSettingsRoute
  '/tasks': typeof LayoutTasksRoute
  '/': typeof LayoutIndexRoute
  '/repositories/$repositoryId': typeof LayoutRepositoriesRepositoryIdRoute
  '/repositories': typeof LayoutRepositoriesIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/login': typeof LoginRoute
  '/_layout/admin': typeof LayoutAdminRoute
  '/_layout/repositories': typeof LayoutRepositoriesRouteWithChildren
  '/_layout/settings': typeof LayoutSettingsRoute
  '/_layout/tasks': typeof LayoutTasksRoute
  '/_layout/': typeof LayoutIndexRoute
  '/_layout/repositories/$repositoryId': typeof LayoutRepositoriesRepositoryIdRoute
  '/_layout/repositories/': typeof LayoutRepositoriesIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/login'
    | '/admin'
    | '/repositories'
    | '/settings'
    | '/tasks'
    | '/'
    | '/repositories/$repositoryId'
    | '/repositories/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/admin'
    | '/settings'
    | '/tasks'
    | '/'
    | '/repositories/$repositoryId'
    | '/repositories'
  id:
    | '__root__'
    | '/_layout'
    | '/login'
    | '/_layout/admin'
    | '/_layout/repositories'
    | '/_layout/settings'
    | '/_layout/tasks'
    | '/_layout/'
    | '/_layout/repositories/$repositoryId'
    | '/_layout/repositories/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren
  LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
  LoginRoute: LoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_layout",
        "/login"
      ]
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/admin",
        "/_layout/repositories",
        "/_layout/settings",
        "/_layout/tasks",
        "/_layout/"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/_layout/admin": {
      "filePath": "_layout/admin.tsx",
      "parent": "/_layout"
    },
    "/_layout/repositories": {
      "filePath": "_layout/repositories.tsx",
      "parent": "/_layout",
      "children": [
        "/_layout/repositories/$repositoryId",
        "/_layout/repositories/"
      ]
    },
    "/_layout/settings": {
      "filePath": "_layout/settings.tsx",
      "parent": "/_layout"
    },
    "/_layout/tasks": {
      "filePath": "_layout/tasks.tsx",
      "parent": "/_layout"
    },
    "/_layout/": {
      "filePath": "_layout/index.tsx",
      "parent": "/_layout"
    },
    "/_layout/repositories/$repositoryId": {
      "filePath": "_layout/repositories/$repositoryId.tsx",
      "parent": "/_layout/repositories"
    },
    "/_layout/repositories/": {
      "filePath": "_layout/repositories/index.tsx",
      "parent": "/_layout/repositories"
    }
  }
}
ROUTE_MANIFEST_END */
