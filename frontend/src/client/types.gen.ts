// This file is auto-generated by @hey-api/openapi-ts

/**
 * Body_login-login_access_token
 */
export type BodyLoginLoginAccessToken = {
    /**
     * Grant Type
     */
    grant_type?: string | null;
    /**
     * Username
     */
    username: string;
    /**
     * Password
     */
    password: string;
    /**
     * Scope
     */
    scope?: string;
    /**
     * Client Id
     */
    client_id?: string | null;
    /**
     * Client Secret
     */
    client_secret?: string | null;
};

/**
 * EcosystemStatsListPublic
 */
export type EcosystemStatsListPublic = {
    /**
     * Data
     */
    data: Array<EcosystemStatsPublic>;
    /**
     * Count
     */
    count: number;
};

/**
 * EcosystemStatsPublic
 */
export type EcosystemStatsPublic = {
    /**
     * Id
     */
    id: string;
    /**
     * Date
     */
    date: string;
    /**
     * Total Repositories
     */
    total_repositories: number;
    /**
     * Active Repositories
     */
    active_repositories: number;
    /**
     * Repositories With Resources
     */
    repositories_with_resources: number;
    /**
     * Total Resources
     */
    total_resources: number;
    /**
     * Active Resources
     */
    active_resources: number;
    /**
     * Total Resource Events
     */
    total_resource_events: number;
    /**
     * Resource Type Breakdown
     */
    resource_type_breakdown: {
        [key: string]: number;
    };
    /**
     * Popular Helm Charts
     */
    popular_helm_charts: {
        [key: string]: number;
    };
    /**
     * Daily Created Resources
     */
    daily_created_resources: number;
    /**
     * Daily Modified Resources
     */
    daily_modified_resources: number;
    /**
     * Daily Deleted Resources
     */
    daily_deleted_resources: number;
    /**
     * Total Stars
     */
    total_stars: number;
    /**
     * Total Forks
     */
    total_forks: number;
    /**
     * Total Watchers
     */
    total_watchers: number;
    /**
     * Total Open Issues
     */
    total_open_issues: number;
    /**
     * Language Breakdown
     */
    language_breakdown: {
        [key: string]: number;
    };
    /**
     * Popular Topics
     */
    popular_topics: {
        [key: string]: number;
    };
    /**
     * Repository Growth
     */
    repository_growth: number;
    /**
     * Resource Growth
     */
    resource_growth: number;
    /**
     * Star Growth
     */
    star_growth: number;
    /**
     * Calculated At
     */
    calculated_at: string;
    /**
     * Calculation Duration Seconds
     */
    calculation_duration_seconds: number;
};

/**
 * EcosystemTrendPublic
 * Trend data for a specific metric over time
 */
export type EcosystemTrendPublic = {
    /**
     * Date
     */
    date: string;
    /**
     * Value
     */
    value: number;
};

/**
 * EcosystemTrendsPublic
 * Collection of trend data for visualization
 */
export type EcosystemTrendsPublic = {
    /**
     * Repository Trends
     */
    repository_trends: Array<EcosystemTrendPublic>;
    /**
     * Resource Trends
     */
    resource_trends: Array<EcosystemTrendPublic>;
    /**
     * Activity Trends
     */
    activity_trends: Array<EcosystemTrendPublic>;
};

/**
 * EventDailyCount
 */
export type EventDailyCount = {
    /**
     * Date
     */
    date: string;
    /**
     * Event Type
     */
    event_type: string;
    /**
     * Count
     */
    count: number;
};

/**
 * EventDailyCountsPublic
 */
export type EventDailyCountsPublic = {
    /**
     * Data
     */
    data: Array<EventDailyCount>;
};

/**
 * GroupedKubernetesResource
 */
export type GroupedKubernetesResource = {
    /**
     * Kind
     */
    kind: string;
    /**
     * Name
     */
    name: string;
    /**
     * Total Count
     */
    total_count: number;
    /**
     * Repositories
     */
    repositories: Array<GroupedRepositoryBreakdown>;
};

/**
 * GroupedKubernetesResourcesPublic
 */
export type GroupedKubernetesResourcesPublic = {
    /**
     * Data
     */
    data: Array<GroupedKubernetesResource>;
    /**
     * Count
     */
    count: number;
};

/**
 * GroupedRepositoryBreakdown
 */
export type GroupedRepositoryBreakdown = {
    /**
     * Repository Id
     */
    repository_id: string;
    /**
     * Repository Name
     */
    repository_name: string;
    /**
     * Count
     */
    count: number;
};

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
    /**
     * Detail
     */
    detail?: Array<ValidationError>;
};

/**
 * HelmReleaseActivityListPublic
 */
export type HelmReleaseActivityListPublic = {
    /**
     * Data
     */
    data: Array<HelmReleaseActivityPublic>;
};

/**
 * HelmReleaseActivityPublic
 */
export type HelmReleaseActivityPublic = {
    /**
     * Release Name
     */
    release_name: string;
    /**
     * Changes
     */
    changes: Array<HelmReleaseChangePublic>;
};

/**
 * HelmReleaseChangePublic
 */
export type HelmReleaseChangePublic = {
    /**
     * Change Type
     */
    change_type: string;
    /**
     * Timestamp
     */
    timestamp: string;
    /**
     * Yaml
     */
    yaml: string | null;
    /**
     * User
     */
    user?: string | null;
};

/**
 * KubernetesResourceEventPublic
 */
export type KubernetesResourceEventPublic = {
    /**
     * Id
     */
    id: string;
    /**
     * Event Type
     */
    event_type: string;
    /**
     * Event Timestamp
     */
    event_timestamp: string;
    /**
     * Resource Name
     */
    resource_name: string;
    /**
     * Resource Namespace
     */
    resource_namespace: string | null;
    /**
     * Resource Kind
     */
    resource_kind: string;
    /**
     * File Path
     */
    file_path: string;
    /**
     * Changes Detected
     */
    changes_detected: Array<string>;
    /**
     * Sync Run Id
     */
    sync_run_id: string;
};

/**
 * KubernetesResourceEventsPublic
 */
export type KubernetesResourceEventsPublic = {
    /**
     * Data
     */
    data: Array<KubernetesResourceEventPublic>;
    /**
     * Count
     */
    count: number;
};

/**
 * KubernetesResourcePublic
 */
export type KubernetesResourcePublic = {
    /**
     * Id
     */
    id: string;
    /**
     * Repository Id
     */
    repository_id: string;
    /**
     * Api Version
     */
    api_version: string;
    /**
     * Kind
     */
    kind: string;
    /**
     * Name
     */
    name: string;
    /**
     * Namespace
     */
    namespace: string | null;
    /**
     * File Path
     */
    file_path: string;
    /**
     * File Hash
     */
    file_hash: string;
    /**
     * Version
     */
    version: string | null;
    /**
     * Data
     */
    data: {
        [key: string]: unknown;
    };
    /**
     * Status
     */
    status: string;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at: string;
};

/**
 * KubernetesResourcesPublic
 */
export type KubernetesResourcesPublic = {
    /**
     * Data
     */
    data: Array<KubernetesResourcePublic>;
    /**
     * Count
     */
    count: number;
};

/**
 * Message
 */
export type Message = {
    /**
     * Message
     */
    message: string;
};

/**
 * PeriodicTaskResponse
 */
export type PeriodicTaskResponse = {
    /**
     * Name
     */
    name: string;
    /**
     * Task
     */
    task: string;
    /**
     * Schedule
     */
    schedule: string;
    /**
     * Enabled
     */
    enabled?: boolean;
    /**
     * Total Run Count
     */
    total_run_count?: number | null;
    /**
     * Args
     */
    args?: Array<unknown> | null;
    /**
     * Kwargs
     */
    kwargs?: {
        [key: string]: unknown;
    } | null;
};

/**
 * RepositoriesPublic
 */
export type RepositoriesPublic = {
    /**
     * Data
     */
    data: Array<RepositoryPublic>;
    /**
     * Count
     */
    count: number;
};

/**
 * RepositoryMetricsPublic
 */
export type RepositoryMetricsPublic = {
    /**
     * Id
     */
    id: string;
    /**
     * Stars Count
     */
    stars_count: number;
    /**
     * Forks Count
     */
    forks_count: number;
    /**
     * Watchers Count
     */
    watchers_count: number;
    /**
     * Open Issues Count
     */
    open_issues_count: number;
    /**
     * Size
     */
    size: number;
    /**
     * Kubernetes Resources Count
     */
    kubernetes_resources_count: number;
    /**
     * Updated At
     */
    updated_at: string;
    /**
     * Pushed At
     */
    pushed_at: string | null;
    /**
     * Recorded At
     */
    recorded_at: string;
};

/**
 * RepositoryPublic
 */
export type RepositoryPublic = {
    /**
     * Name
     */
    name: string;
    /**
     * Full Name
     */
    full_name: string;
    /**
     * Owner
     */
    owner: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Language
     */
    language?: string | null;
    /**
     * Topics
     */
    topics?: Array<string>;
    /**
     * License Name
     */
    license_name?: string | null;
    /**
     * Default Branch
     */
    default_branch?: string;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Discovery Tags
     */
    discovery_tags?: Array<string>;
    /**
     * Id
     */
    id: string;
    /**
     * Github Id
     */
    github_id: number;
    /**
     * Discovered At
     */
    discovered_at: string;
    /**
     * Last Sync At
     */
    last_sync_at?: string | null;
    sync_status?: SyncStatus;
    /**
     * Sync Error
     */
    sync_error?: string | null;
    /**
     * Working Directory Path
     */
    working_directory_path?: string | null;
    /**
     * Last Scan At
     */
    last_scan_at?: string | null;
    scan_status?: SyncStatus;
    /**
     * Scan Error
     */
    scan_error?: string | null;
    /**
     * Last Scan Total Resources
     */
    last_scan_total_resources?: number | null;
    latest_metrics?: RepositoryMetricsPublic | null;
};

/**
 * RepositoryStatsPublic
 */
export type RepositoryStatsPublic = {
    /**
     * Total Repositories
     */
    total_repositories: number;
    /**
     * Total Stars
     */
    total_stars: number;
    /**
     * Total Forks
     */
    total_forks: number;
    /**
     * Languages
     */
    languages: {
        [key: string]: number;
    };
    /**
     * Top Repositories
     */
    top_repositories: Array<RepositoryPublic>;
};

/**
 * SyncStatus
 */
export type SyncStatus = 'pending' | 'syncing' | 'success' | 'error' | 'blocked' | 'pending_approval';

/**
 * TaskMetaResponse
 */
export type TaskMetaResponse = {
    /**
     * Task Id
     */
    task_id: string;
    /**
     * Status
     */
    status: string;
    /**
     * Result
     */
    result?: string | null;
    /**
     * Date Done
     */
    date_done?: string | null;
    /**
     * Traceback
     */
    traceback?: string | null;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Args
     */
    args?: string | null;
    /**
     * Kwargs
     */
    kwargs?: string | null;
    /**
     * Worker
     */
    worker?: string | null;
    /**
     * Retries
     */
    retries?: number | null;
};

/**
 * TaskResponse
 */
export type TaskResponse = {
    /**
     * Task Id
     */
    task_id: string;
    /**
     * Status
     */
    status: string;
    /**
     * Message
     */
    message: string;
};

/**
 * TaskStatusResponse
 */
export type TaskStatusResponse = {
    /**
     * Task Id
     */
    task_id: string;
    /**
     * Status
     */
    status: string;
    /**
     * Result
     */
    result?: unknown | null;
    /**
     * Traceback
     */
    traceback?: string | null;
    /**
     * Date Done
     */
    date_done?: string | null;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Worker
     */
    worker?: string | null;
    /**
     * Retries
     */
    retries?: number | null;
};

/**
 * Token
 */
export type Token = {
    /**
     * Access Token
     */
    access_token: string;
    /**
     * Token Type
     */
    token_type?: string;
};

/**
 * UserPublic
 */
export type UserPublic = {
    /**
     * Email
     */
    email: string;
    /**
     * Is Active
     */
    is_active?: boolean;
    /**
     * Is Superuser
     */
    is_superuser?: boolean;
    /**
     * Full Name
     */
    full_name?: string | null;
    /**
     * Id
     */
    id: string;
};

/**
 * ValidationError
 */
export type ValidationError = {
    /**
     * Location
     */
    loc: Array<string | number>;
    /**
     * Message
     */
    msg: string;
    /**
     * Error Type
     */
    type: string;
};

/**
 * WorkerStatusResponse
 */
export type WorkerStatusResponse = {
    /**
     * Active
     */
    active: {
        [key: string]: unknown;
    };
    /**
     * Scheduled
     */
    scheduled: {
        [key: string]: unknown;
    };
    /**
     * Reserved
     */
    reserved: {
        [key: string]: unknown;
    };
    /**
     * Stats
     */
    stats: {
        [key: string]: unknown;
    };
    /**
     * Periodic Tasks
     */
    periodic_tasks: Array<PeriodicTaskResponse>;
};

export type LoginLoginAccessTokenData = {
    body: BodyLoginLoginAccessToken;
    path?: never;
    query?: never;
    url: '/api/v1/login/access-token';
};

export type LoginLoginAccessTokenErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LoginLoginAccessTokenError = LoginLoginAccessTokenErrors[keyof LoginLoginAccessTokenErrors];

export type LoginLoginAccessTokenResponses = {
    /**
     * Successful Response
     */
    200: Token;
};

export type LoginLoginAccessTokenResponse = LoginLoginAccessTokenResponses[keyof LoginLoginAccessTokenResponses];

export type LoginWhoamiData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/me';
};

export type LoginWhoamiResponses = {
    /**
     * Successful Response
     */
    200: UserPublic;
};

export type LoginWhoamiResponse = LoginWhoamiResponses[keyof LoginWhoamiResponses];

export type AdminGetDatabaseStatsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/admin/database-stats';
};

export type AdminGetDatabaseStatsResponses = {
    /**
     * Response Admin-Get Database Stats
     * Successful Response
     */
    200: {
        [key: string]: unknown;
    };
};

export type AdminGetDatabaseStatsResponse = AdminGetDatabaseStatsResponses[keyof AdminGetDatabaseStatsResponses];

export type AdminGetRecentActiveRepositoriesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/admin/recent-active-repositories';
};

export type AdminGetRecentActiveRepositoriesResponses = {
    /**
     * Response Admin-Get Recent Active Repositories
     * Successful Response
     */
    200: {
        [key: string]: unknown;
    };
};

export type AdminGetRecentActiveRepositoriesResponse = AdminGetRecentActiveRepositoriesResponses[keyof AdminGetRecentActiveRepositoriesResponses];

export type RepositoriesReadRepositoriesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
    };
    url: '/api/v1/repositories/';
};

export type RepositoriesReadRepositoriesErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RepositoriesReadRepositoriesError = RepositoriesReadRepositoriesErrors[keyof RepositoriesReadRepositoriesErrors];

export type RepositoriesReadRepositoriesResponses = {
    /**
     * Successful Response
     */
    200: RepositoriesPublic;
};

export type RepositoriesReadRepositoriesResponse = RepositoriesReadRepositoriesResponses[keyof RepositoriesReadRepositoriesResponses];

export type RepositoriesReadRepositoryStatsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/repositories/stats';
};

export type RepositoriesReadRepositoryStatsResponses = {
    /**
     * Successful Response
     */
    200: RepositoryStatsPublic;
};

export type RepositoriesReadRepositoryStatsResponse = RepositoriesReadRepositoryStatsResponses[keyof RepositoriesReadRepositoryStatsResponses];

export type RepositoriesSearchRepositoriesData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Q
         * Search query
         */
        q: string;
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
    };
    url: '/api/v1/repositories/search';
};

export type RepositoriesSearchRepositoriesErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RepositoriesSearchRepositoriesError = RepositoriesSearchRepositoriesErrors[keyof RepositoriesSearchRepositoriesErrors];

export type RepositoriesSearchRepositoriesResponses = {
    /**
     * Successful Response
     */
    200: RepositoriesPublic;
};

export type RepositoriesSearchRepositoriesResponse = RepositoriesSearchRepositoriesResponses[keyof RepositoriesSearchRepositoriesResponses];

export type RepositoriesReadRepositoryData = {
    body?: never;
    path: {
        /**
         * Repository Id
         */
        repository_id: string;
    };
    query?: never;
    url: '/api/v1/repositories/{repository_id}';
};

export type RepositoriesReadRepositoryErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RepositoriesReadRepositoryError = RepositoriesReadRepositoryErrors[keyof RepositoriesReadRepositoryErrors];

export type RepositoriesReadRepositoryResponses = {
    /**
     * Successful Response
     */
    200: RepositoryPublic;
};

export type RepositoriesReadRepositoryResponse = RepositoriesReadRepositoryResponses[keyof RepositoriesReadRepositoryResponses];

export type RepositoriesReadRepositoryMetricsData = {
    body?: never;
    path: {
        /**
         * Repository Id
         */
        repository_id: string;
    };
    query?: {
        /**
         * Limit
         */
        limit?: number;
    };
    url: '/api/v1/repositories/{repository_id}/metrics';
};

export type RepositoriesReadRepositoryMetricsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RepositoriesReadRepositoryMetricsError = RepositoriesReadRepositoryMetricsErrors[keyof RepositoriesReadRepositoryMetricsErrors];

export type RepositoriesReadRepositoryMetricsResponses = {
    /**
     * Response Repositories-Read Repository Metrics
     * Successful Response
     */
    200: unknown;
};

export type RepositoriesTriggerRepositoryDiscoveryData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/repositories/discover';
};

export type RepositoriesTriggerRepositoryDiscoveryResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type RepositoriesTriggerRepositoryDiscoveryResponse = RepositoriesTriggerRepositoryDiscoveryResponses[keyof RepositoriesTriggerRepositoryDiscoveryResponses];

export type RepositoriesTriggerRepositorySyncAllData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/repositories/sync';
};

export type RepositoriesTriggerRepositorySyncAllResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type RepositoriesTriggerRepositorySyncAllResponse = RepositoriesTriggerRepositorySyncAllResponses[keyof RepositoriesTriggerRepositorySyncAllResponses];

export type RepositoriesTriggerRepositorySyncSingleData = {
    body?: never;
    path: {
        /**
         * Repository Id
         */
        repository_id: string;
    };
    query?: never;
    url: '/api/v1/repositories/{repository_id}/sync';
};

export type RepositoriesTriggerRepositorySyncSingleErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RepositoriesTriggerRepositorySyncSingleError = RepositoriesTriggerRepositorySyncSingleErrors[keyof RepositoriesTriggerRepositorySyncSingleErrors];

export type RepositoriesTriggerRepositorySyncSingleResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type RepositoriesTriggerRepositorySyncSingleResponse = RepositoriesTriggerRepositorySyncSingleResponses[keyof RepositoriesTriggerRepositorySyncSingleResponses];

export type RepositoriesBlockRepositoryData = {
    body?: never;
    path: {
        /**
         * Repository Id
         */
        repository_id: string;
    };
    query?: never;
    url: '/api/v1/repositories/{repository_id}/block';
};

export type RepositoriesBlockRepositoryErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RepositoriesBlockRepositoryError = RepositoriesBlockRepositoryErrors[keyof RepositoriesBlockRepositoryErrors];

export type RepositoriesBlockRepositoryResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type RepositoriesBlockRepositoryResponse = RepositoriesBlockRepositoryResponses[keyof RepositoriesBlockRepositoryResponses];

export type RepositoriesApproveRepositoryData = {
    body?: never;
    path: {
        /**
         * Repository Id
         */
        repository_id: string;
    };
    query?: never;
    url: '/api/v1/repositories/{repository_id}/approve';
};

export type RepositoriesApproveRepositoryErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RepositoriesApproveRepositoryError = RepositoriesApproveRepositoryErrors[keyof RepositoriesApproveRepositoryErrors];

export type RepositoriesApproveRepositoryResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type RepositoriesApproveRepositoryResponse = RepositoriesApproveRepositoryResponses[keyof RepositoriesApproveRepositoryResponses];

export type RepositoriesReadRepositoryEventsData = {
    body?: never;
    path: {
        /**
         * Repository Id
         */
        repository_id: string;
    };
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Event Type
         * Filter by event type (CREATED, MODIFIED, DELETED)
         */
        event_type?: string | null;
        /**
         * Resource Kind
         * Filter by resource kind
         */
        resource_kind?: string | null;
        /**
         * Resource Namespace
         * Filter by resource namespace
         */
        resource_namespace?: string | null;
    };
    url: '/api/v1/repositories/{repository_id}/events';
};

export type RepositoriesReadRepositoryEventsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RepositoriesReadRepositoryEventsError = RepositoriesReadRepositoryEventsErrors[keyof RepositoriesReadRepositoryEventsErrors];

export type RepositoriesReadRepositoryEventsResponses = {
    /**
     * Successful Response
     */
    200: KubernetesResourceEventsPublic;
};

export type RepositoriesReadRepositoryEventsResponse = RepositoriesReadRepositoryEventsResponses[keyof RepositoriesReadRepositoryEventsResponses];

export type RepositoriesReadRepositoryEventsDailyCountsData = {
    body?: never;
    path: {
        /**
         * Repository Id
         */
        repository_id: string;
    };
    query?: {
        /**
         * Days
         * Number of days to include in the chart
         */
        days?: number;
    };
    url: '/api/v1/repositories/{repository_id}/events/daily-counts';
};

export type RepositoriesReadRepositoryEventsDailyCountsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RepositoriesReadRepositoryEventsDailyCountsError = RepositoriesReadRepositoryEventsDailyCountsErrors[keyof RepositoriesReadRepositoryEventsDailyCountsErrors];

export type RepositoriesReadRepositoryEventsDailyCountsResponses = {
    /**
     * Successful Response
     */
    200: EventDailyCountsPublic;
};

export type RepositoriesReadRepositoryEventsDailyCountsResponse = RepositoriesReadRepositoryEventsDailyCountsResponses[keyof RepositoriesReadRepositoryEventsDailyCountsResponses];

export type TasksTriggerPeriodicTaskData = {
    body?: never;
    path: {
        /**
         * Task Name
         */
        task_name: string;
    };
    query?: never;
    url: '/api/v1/tasks/trigger-periodic/{task_name}';
};

export type TasksTriggerPeriodicTaskErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type TasksTriggerPeriodicTaskError = TasksTriggerPeriodicTaskErrors[keyof TasksTriggerPeriodicTaskErrors];

export type TasksTriggerPeriodicTaskResponses = {
    /**
     * Successful Response
     */
    200: TaskResponse;
};

export type TasksTriggerPeriodicTaskResponse = TasksTriggerPeriodicTaskResponses[keyof TasksTriggerPeriodicTaskResponses];

export type TasksGetTaskStatusData = {
    body?: never;
    path: {
        /**
         * Task Id
         */
        task_id: string;
    };
    query?: never;
    url: '/api/v1/tasks/status/{task_id}';
};

export type TasksGetTaskStatusErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type TasksGetTaskStatusError = TasksGetTaskStatusErrors[keyof TasksGetTaskStatusErrors];

export type TasksGetTaskStatusResponses = {
    /**
     * Successful Response
     */
    200: TaskStatusResponse;
};

export type TasksGetTaskStatusResponse = TasksGetTaskStatusResponses[keyof TasksGetTaskStatusResponses];

export type TasksGetWorkerStatusData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/tasks/workers';
};

export type TasksGetWorkerStatusResponses = {
    /**
     * Successful Response
     */
    200: WorkerStatusResponse;
};

export type TasksGetWorkerStatusResponse = TasksGetWorkerStatusResponses[keyof TasksGetWorkerStatusResponses];

export type TasksListTasksData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Status
         * Filter by task status (e.g., PENDING, FAILURE, SUCCESS)
         */
        status?: string | null;
        /**
         * Since
         * Only tasks after this datetime (ISO8601)
         */
        since?: string | null;
        /**
         * Until
         * Only tasks before this datetime (ISO8601)
         */
        until?: string | null;
        /**
         * Limit
         * Max number of results
         */
        limit?: number;
        /**
         * Offset
         * Offset for pagination
         */
        offset?: number;
    };
    url: '/api/v1/tasks/tasks/';
};

export type TasksListTasksErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type TasksListTasksError = TasksListTasksErrors[keyof TasksListTasksErrors];

export type TasksListTasksResponses = {
    /**
     * Response Tasks-List Tasks
     * Successful Response
     */
    200: Array<TaskMetaResponse>;
};

export type TasksListTasksResponse = TasksListTasksResponses[keyof TasksListTasksResponses];

export type EcosystemGetEcosystemStatsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Days
         */
        days?: number;
    };
    url: '/api/v1/ecosystem/';
};

export type EcosystemGetEcosystemStatsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type EcosystemGetEcosystemStatsError = EcosystemGetEcosystemStatsErrors[keyof EcosystemGetEcosystemStatsErrors];

export type EcosystemGetEcosystemStatsResponses = {
    /**
     * Successful Response
     */
    200: EcosystemStatsListPublic;
};

export type EcosystemGetEcosystemStatsResponse = EcosystemGetEcosystemStatsResponses[keyof EcosystemGetEcosystemStatsResponses];

export type EcosystemGetLatestEcosystemStatsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/ecosystem/latest';
};

export type EcosystemGetLatestEcosystemStatsResponses = {
    /**
     * Successful Response
     */
    200: EcosystemStatsPublic;
};

export type EcosystemGetLatestEcosystemStatsResponse = EcosystemGetLatestEcosystemStatsResponses[keyof EcosystemGetLatestEcosystemStatsResponses];

export type EcosystemGetEcosystemTrendsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Days
         */
        days?: number;
    };
    url: '/api/v1/ecosystem/trends';
};

export type EcosystemGetEcosystemTrendsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type EcosystemGetEcosystemTrendsError = EcosystemGetEcosystemTrendsErrors[keyof EcosystemGetEcosystemTrendsErrors];

export type EcosystemGetEcosystemTrendsResponses = {
    /**
     * Successful Response
     */
    200: EcosystemTrendsPublic;
};

export type EcosystemGetEcosystemTrendsResponse = EcosystemGetEcosystemTrendsResponses[keyof EcosystemGetEcosystemTrendsResponses];

export type EcosystemTriggerEcosystemAggregationData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Target Date
         */
        target_date?: string | null;
    };
    url: '/api/v1/ecosystem/trigger-aggregation';
};

export type EcosystemTriggerEcosystemAggregationErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type EcosystemTriggerEcosystemAggregationError = EcosystemTriggerEcosystemAggregationErrors[keyof EcosystemTriggerEcosystemAggregationErrors];

export type EcosystemTriggerEcosystemAggregationResponses = {
    /**
     * Response Ecosystem-Trigger Ecosystem Aggregation
     * Successful Response
     */
    200: {
        [key: string]: unknown;
    };
};

export type EcosystemTriggerEcosystemAggregationResponse = EcosystemTriggerEcosystemAggregationResponses[keyof EcosystemTriggerEcosystemAggregationResponses];

export type EcosystemGetHelmReleaseActivityData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Limit
         */
        limit?: number;
    };
    url: '/api/v1/ecosystem/helm-release-activity';
};

export type EcosystemGetHelmReleaseActivityErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type EcosystemGetHelmReleaseActivityError = EcosystemGetHelmReleaseActivityErrors[keyof EcosystemGetHelmReleaseActivityErrors];

export type EcosystemGetHelmReleaseActivityResponses = {
    /**
     * Successful Response
     */
    200: HelmReleaseActivityListPublic;
};

export type EcosystemGetHelmReleaseActivityResponse = EcosystemGetHelmReleaseActivityResponses[keyof EcosystemGetHelmReleaseActivityResponses];

export type KubernetesListKubernetesResourcesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Repository Id
         */
        repository_id?: string | null;
        /**
         * Kind
         */
        kind?: string | null;
        /**
         * Api Version
         */
        api_version?: string | null;
        /**
         * Namespace
         */
        namespace?: string | null;
        /**
         * Status
         */
        status?: string | null;
    };
    url: '/api/v1/kubernetes/resources';
};

export type KubernetesListKubernetesResourcesErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type KubernetesListKubernetesResourcesError = KubernetesListKubernetesResourcesErrors[keyof KubernetesListKubernetesResourcesErrors];

export type KubernetesListKubernetesResourcesResponses = {
    /**
     * Successful Response
     */
    200: KubernetesResourcesPublic;
};

export type KubernetesListKubernetesResourcesResponse = KubernetesListKubernetesResourcesResponses[keyof KubernetesListKubernetesResourcesResponses];

export type KubernetesListGroupedKubernetesResourcesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Repository Id
         */
        repository_id?: string | null;
        /**
         * Kind
         */
        kind?: string | null;
        /**
         * Api Version
         */
        api_version?: string | null;
        /**
         * Namespace
         */
        namespace?: string | null;
        /**
         * Status
         */
        status?: string | null;
    };
    url: '/api/v1/kubernetes/resources/grouped';
};

export type KubernetesListGroupedKubernetesResourcesErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type KubernetesListGroupedKubernetesResourcesError = KubernetesListGroupedKubernetesResourcesErrors[keyof KubernetesListGroupedKubernetesResourcesErrors];

export type KubernetesListGroupedKubernetesResourcesResponses = {
    /**
     * Successful Response
     */
    200: GroupedKubernetesResourcesPublic;
};

export type KubernetesListGroupedKubernetesResourcesResponse = KubernetesListGroupedKubernetesResourcesResponses[keyof KubernetesListGroupedKubernetesResourcesResponses];

export type HealthSystemHealthCheckData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health';
};

export type HealthSystemHealthCheckResponses = {
    /**
     * Response Health-System Health Check
     * Successful Response
     */
    200: {
        [key: string]: unknown;
    };
};

export type HealthSystemHealthCheckResponse = HealthSystemHealthCheckResponses[keyof HealthSystemHealthCheckResponses];

export type ClientOptions = {
    baseUrl: `${string}://${string}` | (string & {});
};