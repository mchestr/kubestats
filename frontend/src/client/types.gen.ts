// This file is auto-generated by @hey-api/openapi-ts

/**
 * Body_login-login_access_token
 */
export type BodyLoginLoginAccessToken = {
    /**
     * Grant Type
     */
    grant_type?: string | null;
    /**
     * Username
     */
    username: string;
    /**
     * Password
     */
    password: string;
    /**
     * Scope
     */
    scope?: string;
    /**
     * Client Id
     */
    client_id?: string | null;
    /**
     * Client Secret
     */
    client_secret?: string | null;
};

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
    /**
     * Detail
     */
    detail?: Array<ValidationError>;
};

/**
 * KubernetesResourceMetricsPublic
 */
export type KubernetesResourceMetricsPublic = {
    /**
     * Id
     */
    id: string;
    /**
     * Chart Version
     */
    chart_version: string | null;
    /**
     * Chart Name
     */
    chart_name: string | null;
    /**
     * Chart Repository
     */
    chart_repository: string | null;
    /**
     * Source Revision
     */
    source_revision: string | null;
    /**
     * Image Versions
     */
    image_versions: {
        [key: string]: string;
    };
    /**
     * Replicas
     */
    replicas: number | null;
    /**
     * Reference Versions
     */
    reference_versions: {
        [key: string]: string;
    };
    /**
     * Recorded At
     */
    recorded_at: string;
};

/**
 * KubernetesResourcePublic
 */
export type KubernetesResourcePublic = {
    /**
     * Id
     */
    id: string;
    /**
     * Repository Id
     */
    repository_id: string;
    /**
     * Api Version
     */
    api_version: string;
    /**
     * Kind
     */
    kind: string;
    /**
     * Name
     */
    name: string;
    /**
     * Namespace
     */
    namespace: string | null;
    /**
     * File Path
     */
    file_path: string;
    /**
     * Resource Metadata
     */
    resource_metadata: {
        [key: string]: unknown;
    };
    /**
     * Spec
     */
    spec: {
        [key: string]: unknown;
    };
    /**
     * Current Status
     */
    current_status: string;
    /**
     * Modification Count
     */
    modification_count: number;
    /**
     * Last Change Type
     */
    last_change_type: string | null;
    /**
     * First Seen At
     */
    first_seen_at: string;
    /**
     * Last Updated At
     */
    last_updated_at: string;
    latest_metrics?: KubernetesResourceMetricsPublic | null;
};

/**
 * KubernetesResourcesPublic
 */
export type KubernetesResourcesPublic = {
    /**
     * Data
     */
    data: Array<KubernetesResourcePublic>;
    /**
     * Count
     */
    count: number;
};

/**
 * KubernetesStatsPublic
 */
export type KubernetesStatsPublic = {
    /**
     * Total Resources
     */
    total_resources: number;
    /**
     * Total Repositories With Resources
     */
    total_repositories_with_resources: number;
    /**
     * Resource Breakdown
     */
    resource_breakdown: {
        [key: string]: number;
    };
    /**
     * Popular Charts
     */
    popular_charts: Array<ResourceTrendPublic>;
    /**
     * Recent Trends
     */
    recent_trends: Array<ResourceTrendPublic>;
};

/**
 * Message
 */
export type Message = {
    /**
     * Message
     */
    message: string;
};

/**
 * PeriodicTaskResponse
 */
export type PeriodicTaskResponse = {
    /**
     * Name
     */
    name: string;
    /**
     * Task
     */
    task: string;
    /**
     * Schedule
     */
    schedule: string;
    /**
     * Enabled
     */
    enabled?: boolean;
    /**
     * Total Run Count
     */
    total_run_count?: number | null;
    /**
     * Args
     */
    args?: Array<unknown> | null;
    /**
     * Kwargs
     */
    kwargs?: {
        [key: string]: unknown;
    } | null;
};

/**
 * RepositoriesPublic
 */
export type RepositoriesPublic = {
    /**
     * Data
     */
    data: Array<RepositoryPublic>;
    /**
     * Count
     */
    count: number;
};

/**
 * RepositoryMetricsPublic
 */
export type RepositoryMetricsPublic = {
    /**
     * Id
     */
    id: string;
    /**
     * Stars Count
     */
    stars_count: number;
    /**
     * Forks Count
     */
    forks_count: number;
    /**
     * Watchers Count
     */
    watchers_count: number;
    /**
     * Open Issues Count
     */
    open_issues_count: number;
    /**
     * Size
     */
    size: number;
    /**
     * Kubernetes Resources Count
     */
    kubernetes_resources_count: number;
    /**
     * Updated At
     */
    updated_at: string;
    /**
     * Pushed At
     */
    pushed_at: string | null;
    /**
     * Recorded At
     */
    recorded_at: string;
};

/**
 * RepositoryPublic
 */
export type RepositoryPublic = {
    /**
     * Name
     */
    name: string;
    /**
     * Full Name
     */
    full_name: string;
    /**
     * Owner
     */
    owner: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Language
     */
    language?: string | null;
    /**
     * Topics
     */
    topics?: Array<string>;
    /**
     * License Name
     */
    license_name?: string | null;
    /**
     * Default Branch
     */
    default_branch?: string;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Discovery Tags
     */
    discovery_tags?: Array<string>;
    /**
     * Id
     */
    id: string;
    /**
     * Github Id
     */
    github_id: number;
    /**
     * Discovered At
     */
    discovered_at: string;
    /**
     * Last Sync At
     */
    last_sync_at?: string | null;
    sync_status?: SyncStatus;
    /**
     * Sync Error
     */
    sync_error?: string | null;
    /**
     * Working Directory Path
     */
    working_directory_path?: string | null;
    /**
     * Last Scan At
     */
    last_scan_at?: string | null;
    scan_status?: SyncStatus;
    /**
     * Scan Error
     */
    scan_error?: string | null;
    /**
     * Last Scan Total Resources
     */
    last_scan_total_resources?: number | null;
    latest_metrics?: RepositoryMetricsPublic | null;
};

/**
 * RepositoryStatsPublic
 */
export type RepositoryStatsPublic = {
    /**
     * Total Repositories
     */
    total_repositories: number;
    /**
     * Total Stars
     */
    total_stars: number;
    /**
     * Total Forks
     */
    total_forks: number;
    /**
     * Languages
     */
    languages: {
        [key: string]: number;
    };
    /**
     * Top Repositories
     */
    top_repositories: Array<RepositoryPublic>;
};

/**
 * ResourceReferencePublic
 */
export type ResourceReferencePublic = {
    /**
     * Id
     */
    id: string;
    /**
     * Reference Type
     */
    reference_type: string;
    /**
     * Target Name
     */
    target_name: string;
    /**
     * Target Namespace
     */
    target_namespace: string | null;
    /**
     * Target Kind
     */
    target_kind: string;
    /**
     * Target Api Version
     */
    target_api_version: string | null;
    /**
     * Referenced Version
     */
    referenced_version: string | null;
    /**
     * Is External Reference
     */
    is_external_reference: boolean;
};

/**
 * ResourceTrendPublic
 */
export type ResourceTrendPublic = {
    /**
     * Resource Kind
     */
    resource_kind: string;
    /**
     * Resource Api Version
     */
    resource_api_version: string;
    /**
     * Chart Name
     */
    chart_name: string | null;
    /**
     * Total Instances
     */
    total_instances: number;
    /**
     * Active Repositories
     */
    active_repositories: number;
    /**
     * Growth Trend
     */
    growth_trend: number;
    /**
     * Adoption Velocity
     */
    adoption_velocity: number;
    /**
     * Modification Frequency
     */
    modification_frequency: number;
    /**
     * Popular Versions
     */
    popular_versions: {
        [key: string]: number;
    };
};

/**
 * SyncStatus
 */
export type SyncStatus = 'pending' | 'syncing' | 'success' | 'error' | 'blocked' | 'pending_approval';

/**
 * TaskResponse
 */
export type TaskResponse = {
    /**
     * Task Id
     */
    task_id: string;
    /**
     * Status
     */
    status: string;
    /**
     * Message
     */
    message: string;
};

/**
 * TaskStatusResponse
 */
export type TaskStatusResponse = {
    /**
     * Task Id
     */
    task_id: string;
    /**
     * Status
     */
    status: string;
    /**
     * Result
     */
    result?: unknown | null;
    /**
     * Traceback
     */
    traceback?: string | null;
    /**
     * Date Done
     */
    date_done?: string | null;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Worker
     */
    worker?: string | null;
    /**
     * Retries
     */
    retries?: number | null;
};

/**
 * Token
 */
export type Token = {
    /**
     * Access Token
     */
    access_token: string;
    /**
     * Token Type
     */
    token_type?: string;
};

/**
 * UpdatePassword
 */
export type UpdatePassword = {
    /**
     * Current Password
     */
    current_password: string;
    /**
     * New Password
     */
    new_password: string;
};

/**
 * UserCreate
 */
export type UserCreate = {
    /**
     * Email
     */
    email: string;
    /**
     * Is Active
     */
    is_active?: boolean;
    /**
     * Is Superuser
     */
    is_superuser?: boolean;
    /**
     * Full Name
     */
    full_name?: string | null;
    /**
     * Password
     */
    password: string;
};

/**
 * UserPublic
 */
export type UserPublic = {
    /**
     * Email
     */
    email: string;
    /**
     * Is Active
     */
    is_active?: boolean;
    /**
     * Is Superuser
     */
    is_superuser?: boolean;
    /**
     * Full Name
     */
    full_name?: string | null;
    /**
     * Id
     */
    id: string;
};

/**
 * UserUpdate
 */
export type UserUpdate = {
    /**
     * Email
     */
    email?: string | null;
    /**
     * Is Active
     */
    is_active?: boolean;
    /**
     * Is Superuser
     */
    is_superuser?: boolean;
    /**
     * Full Name
     */
    full_name?: string | null;
    /**
     * Password
     */
    password?: string | null;
};

/**
 * UserUpdateMe
 */
export type UserUpdateMe = {
    /**
     * Full Name
     */
    full_name?: string | null;
    /**
     * Email
     */
    email?: string | null;
};

/**
 * UsersPublic
 */
export type UsersPublic = {
    /**
     * Data
     */
    data: Array<UserPublic>;
    /**
     * Count
     */
    count: number;
};

/**
 * ValidationError
 */
export type ValidationError = {
    /**
     * Location
     */
    loc: Array<string | number>;
    /**
     * Message
     */
    msg: string;
    /**
     * Error Type
     */
    type: string;
};

/**
 * WorkerStatusResponse
 */
export type WorkerStatusResponse = {
    /**
     * Active
     */
    active: {
        [key: string]: unknown;
    };
    /**
     * Scheduled
     */
    scheduled: {
        [key: string]: unknown;
    };
    /**
     * Reserved
     */
    reserved: {
        [key: string]: unknown;
    };
    /**
     * Stats
     */
    stats: {
        [key: string]: unknown;
    };
    /**
     * Periodic Tasks
     */
    periodic_tasks: Array<PeriodicTaskResponse>;
};

export type LoginLoginAccessTokenData = {
    body: BodyLoginLoginAccessToken;
    path?: never;
    query?: never;
    url: '/api/v1/login/access-token';
};

export type LoginLoginAccessTokenErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LoginLoginAccessTokenError = LoginLoginAccessTokenErrors[keyof LoginLoginAccessTokenErrors];

export type LoginLoginAccessTokenResponses = {
    /**
     * Successful Response
     */
    200: Token;
};

export type LoginLoginAccessTokenResponse = LoginLoginAccessTokenResponses[keyof LoginLoginAccessTokenResponses];

export type LoginTestTokenData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/login/test-token';
};

export type LoginTestTokenResponses = {
    /**
     * Successful Response
     */
    200: UserPublic;
};

export type LoginTestTokenResponse = LoginTestTokenResponses[keyof LoginTestTokenResponses];

export type UsersReadUsersData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
    };
    url: '/api/v1/users/';
};

export type UsersReadUsersErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UsersReadUsersError = UsersReadUsersErrors[keyof UsersReadUsersErrors];

export type UsersReadUsersResponses = {
    /**
     * Successful Response
     */
    200: UsersPublic;
};

export type UsersReadUsersResponse = UsersReadUsersResponses[keyof UsersReadUsersResponses];

export type UsersCreateUserData = {
    body: UserCreate;
    path?: never;
    query?: never;
    url: '/api/v1/users/';
};

export type UsersCreateUserErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UsersCreateUserError = UsersCreateUserErrors[keyof UsersCreateUserErrors];

export type UsersCreateUserResponses = {
    /**
     * Successful Response
     */
    200: UserPublic;
};

export type UsersCreateUserResponse = UsersCreateUserResponses[keyof UsersCreateUserResponses];

export type UsersDeleteUserMeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/users/me';
};

export type UsersDeleteUserMeResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type UsersDeleteUserMeResponse = UsersDeleteUserMeResponses[keyof UsersDeleteUserMeResponses];

export type UsersReadUserMeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/users/me';
};

export type UsersReadUserMeResponses = {
    /**
     * Successful Response
     */
    200: UserPublic;
};

export type UsersReadUserMeResponse = UsersReadUserMeResponses[keyof UsersReadUserMeResponses];

export type UsersUpdateUserMeData = {
    body: UserUpdateMe;
    path?: never;
    query?: never;
    url: '/api/v1/users/me';
};

export type UsersUpdateUserMeErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UsersUpdateUserMeError = UsersUpdateUserMeErrors[keyof UsersUpdateUserMeErrors];

export type UsersUpdateUserMeResponses = {
    /**
     * Successful Response
     */
    200: UserPublic;
};

export type UsersUpdateUserMeResponse = UsersUpdateUserMeResponses[keyof UsersUpdateUserMeResponses];

export type UsersUpdatePasswordMeData = {
    body: UpdatePassword;
    path?: never;
    query?: never;
    url: '/api/v1/users/me/password';
};

export type UsersUpdatePasswordMeErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UsersUpdatePasswordMeError = UsersUpdatePasswordMeErrors[keyof UsersUpdatePasswordMeErrors];

export type UsersUpdatePasswordMeResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type UsersUpdatePasswordMeResponse = UsersUpdatePasswordMeResponses[keyof UsersUpdatePasswordMeResponses];

export type UsersDeleteUserData = {
    body?: never;
    path: {
        /**
         * User Id
         */
        user_id: string;
    };
    query?: never;
    url: '/api/v1/users/{user_id}';
};

export type UsersDeleteUserErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UsersDeleteUserError = UsersDeleteUserErrors[keyof UsersDeleteUserErrors];

export type UsersDeleteUserResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type UsersDeleteUserResponse = UsersDeleteUserResponses[keyof UsersDeleteUserResponses];

export type UsersReadUserByIdData = {
    body?: never;
    path: {
        /**
         * User Id
         */
        user_id: string;
    };
    query?: never;
    url: '/api/v1/users/{user_id}';
};

export type UsersReadUserByIdErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UsersReadUserByIdError = UsersReadUserByIdErrors[keyof UsersReadUserByIdErrors];

export type UsersReadUserByIdResponses = {
    /**
     * Successful Response
     */
    200: UserPublic;
};

export type UsersReadUserByIdResponse = UsersReadUserByIdResponses[keyof UsersReadUserByIdResponses];

export type UsersUpdateUserData = {
    body: UserUpdate;
    path: {
        /**
         * User Id
         */
        user_id: string;
    };
    query?: never;
    url: '/api/v1/users/{user_id}';
};

export type UsersUpdateUserErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UsersUpdateUserError = UsersUpdateUserErrors[keyof UsersUpdateUserErrors];

export type UsersUpdateUserResponses = {
    /**
     * Successful Response
     */
    200: UserPublic;
};

export type UsersUpdateUserResponse = UsersUpdateUserResponses[keyof UsersUpdateUserResponses];

export type UtilsHealthCheckData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/utils/health-check/';
};

export type UtilsHealthCheckResponses = {
    /**
     * Response Utils-Health Check
     * Successful Response
     */
    200: boolean;
};

export type UtilsHealthCheckResponse = UtilsHealthCheckResponses[keyof UtilsHealthCheckResponses];

export type RepositoriesReadRepositoriesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
    };
    url: '/api/v1/repositories/';
};

export type RepositoriesReadRepositoriesErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RepositoriesReadRepositoriesError = RepositoriesReadRepositoriesErrors[keyof RepositoriesReadRepositoriesErrors];

export type RepositoriesReadRepositoriesResponses = {
    /**
     * Successful Response
     */
    200: RepositoriesPublic;
};

export type RepositoriesReadRepositoriesResponse = RepositoriesReadRepositoriesResponses[keyof RepositoriesReadRepositoriesResponses];

export type RepositoriesReadRepositoryStatsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/repositories/stats';
};

export type RepositoriesReadRepositoryStatsResponses = {
    /**
     * Successful Response
     */
    200: RepositoryStatsPublic;
};

export type RepositoriesReadRepositoryStatsResponse = RepositoriesReadRepositoryStatsResponses[keyof RepositoriesReadRepositoryStatsResponses];

export type RepositoriesSearchRepositoriesData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Q
         * Search query
         */
        q: string;
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
    };
    url: '/api/v1/repositories/search';
};

export type RepositoriesSearchRepositoriesErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RepositoriesSearchRepositoriesError = RepositoriesSearchRepositoriesErrors[keyof RepositoriesSearchRepositoriesErrors];

export type RepositoriesSearchRepositoriesResponses = {
    /**
     * Successful Response
     */
    200: RepositoriesPublic;
};

export type RepositoriesSearchRepositoriesResponse = RepositoriesSearchRepositoriesResponses[keyof RepositoriesSearchRepositoriesResponses];

export type RepositoriesReadRepositoryData = {
    body?: never;
    path: {
        /**
         * Repository Id
         */
        repository_id: string;
    };
    query?: never;
    url: '/api/v1/repositories/{repository_id}';
};

export type RepositoriesReadRepositoryErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RepositoriesReadRepositoryError = RepositoriesReadRepositoryErrors[keyof RepositoriesReadRepositoryErrors];

export type RepositoriesReadRepositoryResponses = {
    /**
     * Successful Response
     */
    200: RepositoryPublic;
};

export type RepositoriesReadRepositoryResponse = RepositoriesReadRepositoryResponses[keyof RepositoriesReadRepositoryResponses];

export type RepositoriesReadRepositoryMetricsData = {
    body?: never;
    path: {
        /**
         * Repository Id
         */
        repository_id: string;
    };
    query?: {
        /**
         * Limit
         */
        limit?: number;
    };
    url: '/api/v1/repositories/{repository_id}/metrics';
};

export type RepositoriesReadRepositoryMetricsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RepositoriesReadRepositoryMetricsError = RepositoriesReadRepositoryMetricsErrors[keyof RepositoriesReadRepositoryMetricsErrors];

export type RepositoriesReadRepositoryMetricsResponses = {
    /**
     * Response Repositories-Read Repository Metrics
     * Successful Response
     */
    200: unknown;
};

export type RepositoriesTriggerRepositoryDiscoveryData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/repositories/discover';
};

export type RepositoriesTriggerRepositoryDiscoveryResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type RepositoriesTriggerRepositoryDiscoveryResponse = RepositoriesTriggerRepositoryDiscoveryResponses[keyof RepositoriesTriggerRepositoryDiscoveryResponses];

export type RepositoriesTriggerRepositorySyncAllData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/repositories/sync';
};

export type RepositoriesTriggerRepositorySyncAllResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type RepositoriesTriggerRepositorySyncAllResponse = RepositoriesTriggerRepositorySyncAllResponses[keyof RepositoriesTriggerRepositorySyncAllResponses];

export type RepositoriesTriggerRepositorySyncSingleData = {
    body?: never;
    path: {
        /**
         * Repository Id
         */
        repository_id: string;
    };
    query?: never;
    url: '/api/v1/repositories/{repository_id}/sync';
};

export type RepositoriesTriggerRepositorySyncSingleErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RepositoriesTriggerRepositorySyncSingleError = RepositoriesTriggerRepositorySyncSingleErrors[keyof RepositoriesTriggerRepositorySyncSingleErrors];

export type RepositoriesTriggerRepositorySyncSingleResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type RepositoriesTriggerRepositorySyncSingleResponse = RepositoriesTriggerRepositorySyncSingleResponses[keyof RepositoriesTriggerRepositorySyncSingleResponses];

export type RepositoriesBlockRepositoryData = {
    body?: never;
    path: {
        /**
         * Repository Id
         */
        repository_id: string;
    };
    query?: never;
    url: '/api/v1/repositories/{repository_id}/block';
};

export type RepositoriesBlockRepositoryErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RepositoriesBlockRepositoryError = RepositoriesBlockRepositoryErrors[keyof RepositoriesBlockRepositoryErrors];

export type RepositoriesBlockRepositoryResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type RepositoriesBlockRepositoryResponse = RepositoriesBlockRepositoryResponses[keyof RepositoriesBlockRepositoryResponses];

export type RepositoriesApproveRepositoryData = {
    body?: never;
    path: {
        /**
         * Repository Id
         */
        repository_id: string;
    };
    query?: never;
    url: '/api/v1/repositories/{repository_id}/approve';
};

export type RepositoriesApproveRepositoryErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RepositoriesApproveRepositoryError = RepositoriesApproveRepositoryErrors[keyof RepositoriesApproveRepositoryErrors];

export type RepositoriesApproveRepositoryResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type RepositoriesApproveRepositoryResponse = RepositoriesApproveRepositoryResponses[keyof RepositoriesApproveRepositoryResponses];

export type KubernetesReadKubernetesResourcesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Offset
         */
        offset?: number;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Repository Id
         */
        repository_id?: string | null;
        /**
         * Resource Kind
         */
        resource_kind?: string | null;
        /**
         * Api Version
         */
        api_version?: string | null;
        /**
         * Namespace
         */
        namespace?: string | null;
    };
    url: '/api/v1/kubernetes/';
};

export type KubernetesReadKubernetesResourcesErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type KubernetesReadKubernetesResourcesError = KubernetesReadKubernetesResourcesErrors[keyof KubernetesReadKubernetesResourcesErrors];

export type KubernetesReadKubernetesResourcesResponses = {
    /**
     * Successful Response
     */
    200: KubernetesResourcesPublic;
};

export type KubernetesReadKubernetesResourcesResponse = KubernetesReadKubernetesResourcesResponses[keyof KubernetesReadKubernetesResourcesResponses];

export type KubernetesReadKubernetesStatsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/kubernetes/stats';
};

export type KubernetesReadKubernetesStatsResponses = {
    /**
     * Successful Response
     */
    200: KubernetesStatsPublic;
};

export type KubernetesReadKubernetesStatsResponse = KubernetesReadKubernetesStatsResponses[keyof KubernetesReadKubernetesStatsResponses];

export type KubernetesReadKubernetesResourceData = {
    body?: never;
    path: {
        /**
         * Resource Id
         */
        resource_id: string;
    };
    query?: never;
    url: '/api/v1/kubernetes/{resource_id}';
};

export type KubernetesReadKubernetesResourceErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type KubernetesReadKubernetesResourceError = KubernetesReadKubernetesResourceErrors[keyof KubernetesReadKubernetesResourceErrors];

export type KubernetesReadKubernetesResourceResponses = {
    /**
     * Successful Response
     */
    200: KubernetesResourcePublic;
};

export type KubernetesReadKubernetesResourceResponse = KubernetesReadKubernetesResourceResponses[keyof KubernetesReadKubernetesResourceResponses];

export type KubernetesReadResourceReferencesData = {
    body?: never;
    path: {
        /**
         * Resource Id
         */
        resource_id: string;
    };
    query?: never;
    url: '/api/v1/kubernetes/{resource_id}/references';
};

export type KubernetesReadResourceReferencesErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type KubernetesReadResourceReferencesError = KubernetesReadResourceReferencesErrors[keyof KubernetesReadResourceReferencesErrors];

export type KubernetesReadResourceReferencesResponses = {
    /**
     * Response Kubernetes-Read Resource References
     * Successful Response
     */
    200: Array<ResourceReferencePublic>;
};

export type KubernetesReadResourceReferencesResponse = KubernetesReadResourceReferencesResponses[keyof KubernetesReadResourceReferencesResponses];

export type KubernetesReadResourceHistoryData = {
    body?: never;
    path: {
        /**
         * Resource Id
         */
        resource_id: string;
    };
    query?: {
        /**
         * Limit
         */
        limit?: number;
    };
    url: '/api/v1/kubernetes/{resource_id}/history';
};

export type KubernetesReadResourceHistoryErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type KubernetesReadResourceHistoryError = KubernetesReadResourceHistoryErrors[keyof KubernetesReadResourceHistoryErrors];

export type KubernetesReadResourceHistoryResponses = {
    /**
     * Response Kubernetes-Read Resource History
     * Successful Response
     */
    200: unknown;
};

export type KubernetesGetPopularHelmChartsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Time Period
         */
        time_period?: string;
    };
    url: '/api/v1/kubernetes/trends/popular-charts';
};

export type KubernetesGetPopularHelmChartsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type KubernetesGetPopularHelmChartsError = KubernetesGetPopularHelmChartsErrors[keyof KubernetesGetPopularHelmChartsErrors];

export type KubernetesGetPopularHelmChartsResponses = {
    /**
     * Response Kubernetes-Get Popular Helm Charts
     * Successful Response
     */
    200: unknown;
};

export type KubernetesGetResourceAdoptionTrendsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Resource Kind
         */
        resource_kind?: string | null;
        /**
         * Time Period
         */
        time_period?: string;
    };
    url: '/api/v1/kubernetes/trends/resource-adoption';
};

export type KubernetesGetResourceAdoptionTrendsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type KubernetesGetResourceAdoptionTrendsError = KubernetesGetResourceAdoptionTrendsErrors[keyof KubernetesGetResourceAdoptionTrendsErrors];

export type KubernetesGetResourceAdoptionTrendsResponses = {
    /**
     * Response Kubernetes-Get Resource Adoption Trends
     * Successful Response
     */
    200: unknown;
};

export type KubernetesGetHelmReleasesWithVersionsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Offset
         */
        offset?: number;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Repository Id
         */
        repository_id?: string | null;
    };
    url: '/api/v1/kubernetes/helm-releases/with-versions';
};

export type KubernetesGetHelmReleasesWithVersionsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type KubernetesGetHelmReleasesWithVersionsError = KubernetesGetHelmReleasesWithVersionsErrors[keyof KubernetesGetHelmReleasesWithVersionsErrors];

export type KubernetesGetHelmReleasesWithVersionsResponses = {
    /**
     * Response Kubernetes-Get Helm Releases With Versions
     * Successful Response
     */
    200: unknown;
};

export type TasksTriggerHealthCheckData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/tasks/health-check';
};

export type TasksTriggerHealthCheckResponses = {
    /**
     * Successful Response
     */
    200: TaskResponse;
};

export type TasksTriggerHealthCheckResponse = TasksTriggerHealthCheckResponses[keyof TasksTriggerHealthCheckResponses];

export type TasksTriggerPeriodicTaskData = {
    body?: never;
    path: {
        /**
         * Task Name
         */
        task_name: string;
    };
    query?: never;
    url: '/api/v1/tasks/trigger-periodic/{task_name}';
};

export type TasksTriggerPeriodicTaskErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type TasksTriggerPeriodicTaskError = TasksTriggerPeriodicTaskErrors[keyof TasksTriggerPeriodicTaskErrors];

export type TasksTriggerPeriodicTaskResponses = {
    /**
     * Successful Response
     */
    200: TaskResponse;
};

export type TasksTriggerPeriodicTaskResponse = TasksTriggerPeriodicTaskResponses[keyof TasksTriggerPeriodicTaskResponses];

export type TasksGetTaskStatusData = {
    body?: never;
    path: {
        /**
         * Task Id
         */
        task_id: string;
    };
    query?: never;
    url: '/api/v1/tasks/status/{task_id}';
};

export type TasksGetTaskStatusErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type TasksGetTaskStatusError = TasksGetTaskStatusErrors[keyof TasksGetTaskStatusErrors];

export type TasksGetTaskStatusResponses = {
    /**
     * Successful Response
     */
    200: TaskStatusResponse;
};

export type TasksGetTaskStatusResponse = TasksGetTaskStatusResponses[keyof TasksGetTaskStatusResponses];

export type TasksGetWorkerStatusData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/tasks/workers';
};

export type TasksGetWorkerStatusResponses = {
    /**
     * Successful Response
     */
    200: WorkerStatusResponse;
};

export type TasksGetWorkerStatusResponse = TasksGetWorkerStatusResponses[keyof TasksGetWorkerStatusResponses];

export type ClientOptions = {
    baseUrl: `${string}://${string}` | (string & {});
};