// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, urlSearchParamsBodySerializer } from '@hey-api/client-fetch';
import type { LoginLoginAccessTokenData, LoginLoginAccessTokenResponse, LoginLoginAccessTokenError, LoginTestTokenData, LoginTestTokenResponse, UsersReadUsersData, UsersReadUsersResponse, UsersReadUsersError, UsersCreateUserData, UsersCreateUserResponse, UsersCreateUserError, UsersDeleteUserMeData, UsersDeleteUserMeResponse, UsersReadUserMeData, UsersReadUserMeResponse, UsersUpdateUserMeData, UsersUpdateUserMeResponse, UsersUpdateUserMeError, UsersUpdatePasswordMeData, UsersUpdatePasswordMeResponse, UsersUpdatePasswordMeError, UsersDeleteUserData, UsersDeleteUserResponse, UsersDeleteUserError, UsersReadUserByIdData, UsersReadUserByIdResponse, UsersReadUserByIdError, UsersUpdateUserData, UsersUpdateUserResponse, UsersUpdateUserError, UtilsHealthCheckData, UtilsHealthCheckResponse, ItemsReadItemsData, ItemsReadItemsResponse, ItemsReadItemsError, ItemsCreateItemData, ItemsCreateItemResponse, ItemsCreateItemError, ItemsDeleteItemData, ItemsDeleteItemResponse, ItemsDeleteItemError, ItemsReadItemData, ItemsReadItemResponse, ItemsReadItemError, ItemsUpdateItemData, ItemsUpdateItemResponse, ItemsUpdateItemError, TasksTriggerLogTaskData, TasksTriggerLogTaskResponse, TasksTriggerLogTaskError, TasksTriggerHealthCheckData, TasksTriggerHealthCheckResponse, TasksGetTaskStatusData, TasksGetTaskStatusResponse, TasksGetTaskStatusError, TasksGetWorkerStatsData, TasksGetWorkerStatsResponse, TasksGetWorkerStatsError, TasksGetWorkerStatusData, TasksGetWorkerStatusResponse, TasksGetPeriodicTasksData, TasksGetPeriodicTasksResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export class LoginService {
    /**
     * Login Access Token
     * OAuth2 compatible token login, get an access token for future requests
     */
    public static loginLoginAccessToken<ThrowOnError extends boolean = false>(options: Options<LoginLoginAccessTokenData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<LoginLoginAccessTokenResponse, LoginLoginAccessTokenError, ThrowOnError>({
            ...urlSearchParamsBodySerializer,
            url: '/api/v1/login/access-token',
            ...options,
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                ...options?.headers
            }
        });
    }
    
    /**
     * Test Token
     * Test access token
     */
    public static loginTestToken<ThrowOnError extends boolean = false>(options?: Options<LoginTestTokenData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<LoginTestTokenResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/login/test-token',
            ...options
        });
    }
    
}

export class UsersService {
    /**
     * Read Users
     * Retrieve users.
     */
    public static usersReadUsers<ThrowOnError extends boolean = false>(options?: Options<UsersReadUsersData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<UsersReadUsersResponse, UsersReadUsersError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/',
            ...options
        });
    }
    
    /**
     * Create User
     * Create new user.
     */
    public static usersCreateUser<ThrowOnError extends boolean = false>(options: Options<UsersCreateUserData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<UsersCreateUserResponse, UsersCreateUserError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Delete User Me
     * Delete own user.
     */
    public static usersDeleteUserMe<ThrowOnError extends boolean = false>(options?: Options<UsersDeleteUserMeData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).delete<UsersDeleteUserMeResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/me',
            ...options
        });
    }
    
    /**
     * Read User Me
     * Get current user.
     */
    public static usersReadUserMe<ThrowOnError extends boolean = false>(options?: Options<UsersReadUserMeData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<UsersReadUserMeResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/me',
            ...options
        });
    }
    
    /**
     * Update User Me
     * Update own user.
     */
    public static usersUpdateUserMe<ThrowOnError extends boolean = false>(options: Options<UsersUpdateUserMeData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).patch<UsersUpdateUserMeResponse, UsersUpdateUserMeError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/me',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Update Password Me
     * Update own password.
     */
    public static usersUpdatePasswordMe<ThrowOnError extends boolean = false>(options: Options<UsersUpdatePasswordMeData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).patch<UsersUpdatePasswordMeResponse, UsersUpdatePasswordMeError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/me/password',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Delete User
     * Delete a user.
     */
    public static usersDeleteUser<ThrowOnError extends boolean = false>(options: Options<UsersDeleteUserData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<UsersDeleteUserResponse, UsersDeleteUserError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/{user_id}',
            ...options
        });
    }
    
    /**
     * Read User By Id
     * Get a specific user by id.
     */
    public static usersReadUserById<ThrowOnError extends boolean = false>(options: Options<UsersReadUserByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<UsersReadUserByIdResponse, UsersReadUserByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/{user_id}',
            ...options
        });
    }
    
    /**
     * Update User
     * Update a user.
     */
    public static usersUpdateUser<ThrowOnError extends boolean = false>(options: Options<UsersUpdateUserData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).patch<UsersUpdateUserResponse, UsersUpdateUserError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/{user_id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
}

export class UtilsService {
    /**
     * Health Check
     */
    public static utilsHealthCheck<ThrowOnError extends boolean = false>(options?: Options<UtilsHealthCheckData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<UtilsHealthCheckResponse, unknown, ThrowOnError>({
            url: '/api/v1/utils/health-check/',
            ...options
        });
    }
    
}

export class ItemsService {
    /**
     * Read Items
     * Retrieve items.
     */
    public static itemsReadItems<ThrowOnError extends boolean = false>(options?: Options<ItemsReadItemsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<ItemsReadItemsResponse, ItemsReadItemsError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/items/',
            ...options
        });
    }
    
    /**
     * Create Item
     * Create new item.
     */
    public static itemsCreateItem<ThrowOnError extends boolean = false>(options: Options<ItemsCreateItemData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<ItemsCreateItemResponse, ItemsCreateItemError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/items/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Delete Item
     * Delete an item.
     */
    public static itemsDeleteItem<ThrowOnError extends boolean = false>(options: Options<ItemsDeleteItemData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<ItemsDeleteItemResponse, ItemsDeleteItemError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/items/{id}',
            ...options
        });
    }
    
    /**
     * Read Item
     * Get item by ID.
     */
    public static itemsReadItem<ThrowOnError extends boolean = false>(options: Options<ItemsReadItemData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<ItemsReadItemResponse, ItemsReadItemError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/items/{id}',
            ...options
        });
    }
    
    /**
     * Update Item
     * Update an item.
     */
    public static itemsUpdateItem<ThrowOnError extends boolean = false>(options: Options<ItemsUpdateItemData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<ItemsUpdateItemResponse, ItemsUpdateItemError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/items/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
}

export class TasksService {
    /**
     * Trigger Log Task
     * Trigger a basic logging task (superuser only).
     */
    public static tasksTriggerLogTask<ThrowOnError extends boolean = false>(options: Options<TasksTriggerLogTaskData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<TasksTriggerLogTaskResponse, TasksTriggerLogTaskError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/tasks/trigger',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Trigger Health Check
     * Trigger a system health check task (superuser only).
     */
    public static tasksTriggerHealthCheck<ThrowOnError extends boolean = false>(options?: Options<TasksTriggerHealthCheckData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<TasksTriggerHealthCheckResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/tasks/health-check',
            ...options
        });
    }
    
    /**
     * Get Task Status
     * Get status of a specific task (superuser only).
     */
    public static tasksGetTaskStatus<ThrowOnError extends boolean = false>(options: Options<TasksGetTaskStatusData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<TasksGetTaskStatusResponse, TasksGetTaskStatusError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/tasks/status/{task_id}',
            ...options
        });
    }
    
    /**
     * Get Worker Stats
     * Get Celery worker statistics for a specific worker (superuser only).
     * Returns comprehensive worker stats including uptime, memory usage, and task counts.
     */
    public static tasksGetWorkerStats<ThrowOnError extends boolean = false>(options: Options<TasksGetWorkerStatsData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<TasksGetWorkerStatsResponse, TasksGetWorkerStatsError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/tasks/workers/{worker_id}',
            ...options
        });
    }
    
    /**
     * Get Worker Status
     * Get Celery worker status (superuser only).
     */
    public static tasksGetWorkerStatus<ThrowOnError extends boolean = false>(options?: Options<TasksGetWorkerStatusData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<TasksGetWorkerStatusResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/tasks/workers',
            ...options
        });
    }
    
    /**
     * Get Periodic Tasks
     * Get Celery beat periodic tasks configuration (superuser only).
     */
    public static tasksGetPeriodicTasks<ThrowOnError extends boolean = false>(options?: Options<TasksGetPeriodicTasksData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<TasksGetPeriodicTasksResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/tasks/periodic-tasks',
            ...options
        });
    }
    
}