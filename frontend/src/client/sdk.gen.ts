// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, urlSearchParamsBodySerializer } from '@hey-api/client-fetch';
import type { LoginLoginAccessTokenData, LoginLoginAccessTokenResponse, LoginLoginAccessTokenError, LoginTestTokenData, LoginTestTokenResponse, UsersReadUsersData, UsersReadUsersResponse, UsersReadUsersError, UsersCreateUserData, UsersCreateUserResponse, UsersCreateUserError, UsersDeleteUserMeData, UsersDeleteUserMeResponse, UsersReadUserMeData, UsersReadUserMeResponse, UsersUpdateUserMeData, UsersUpdateUserMeResponse, UsersUpdateUserMeError, UsersUpdatePasswordMeData, UsersUpdatePasswordMeResponse, UsersUpdatePasswordMeError, UsersDeleteUserData, UsersDeleteUserResponse, UsersDeleteUserError, UsersReadUserByIdData, UsersReadUserByIdResponse, UsersReadUserByIdError, UsersUpdateUserData, UsersUpdateUserResponse, UsersUpdateUserError, UtilsHealthCheckData, UtilsHealthCheckResponse, AdminGetDatabaseStatsData, AdminGetDatabaseStatsResponse, AdminGetRecentActiveRepositoriesData, AdminGetRecentActiveRepositoriesResponse, RepositoriesReadRepositoriesData, RepositoriesReadRepositoriesResponse, RepositoriesReadRepositoriesError, RepositoriesReadRepositoryStatsData, RepositoriesReadRepositoryStatsResponse, RepositoriesSearchRepositoriesData, RepositoriesSearchRepositoriesResponse, RepositoriesSearchRepositoriesError, RepositoriesReadRepositoryData, RepositoriesReadRepositoryResponse, RepositoriesReadRepositoryError, RepositoriesReadRepositoryMetricsData, RepositoriesReadRepositoryMetricsError, RepositoriesTriggerRepositoryDiscoveryData, RepositoriesTriggerRepositoryDiscoveryResponse, RepositoriesTriggerRepositorySyncAllData, RepositoriesTriggerRepositorySyncAllResponse, RepositoriesTriggerRepositorySyncSingleData, RepositoriesTriggerRepositorySyncSingleResponse, RepositoriesTriggerRepositorySyncSingleError, RepositoriesBlockRepositoryData, RepositoriesBlockRepositoryResponse, RepositoriesBlockRepositoryError, RepositoriesApproveRepositoryData, RepositoriesApproveRepositoryResponse, RepositoriesApproveRepositoryError, RepositoriesReadRepositoryEventsData, RepositoriesReadRepositoryEventsResponse, RepositoriesReadRepositoryEventsError, RepositoriesReadRepositoryEventsDailyCountsData, RepositoriesReadRepositoryEventsDailyCountsResponse, RepositoriesReadRepositoryEventsDailyCountsError, TasksTriggerHealthCheckData, TasksTriggerHealthCheckResponse, TasksTriggerPeriodicTaskData, TasksTriggerPeriodicTaskResponse, TasksTriggerPeriodicTaskError, TasksGetTaskStatusData, TasksGetTaskStatusResponse, TasksGetTaskStatusError, TasksGetWorkerStatusData, TasksGetWorkerStatusResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export class LoginService {
    /**
     * Login Access Token
     * OAuth2 compatible token login, get an access token for future requests
     */
    public static loginLoginAccessToken<ThrowOnError extends boolean = false>(options: Options<LoginLoginAccessTokenData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<LoginLoginAccessTokenResponse, LoginLoginAccessTokenError, ThrowOnError>({
            ...urlSearchParamsBodySerializer,
            url: '/api/v1/login/access-token',
            ...options,
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                ...options?.headers
            }
        });
    }
    
    /**
     * Test Token
     * Test access token
     */
    public static loginTestToken<ThrowOnError extends boolean = false>(options?: Options<LoginTestTokenData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<LoginTestTokenResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/login/test-token',
            ...options
        });
    }
    
}

export class UsersService {
    /**
     * Read Users
     * Retrieve users.
     */
    public static usersReadUsers<ThrowOnError extends boolean = false>(options?: Options<UsersReadUsersData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<UsersReadUsersResponse, UsersReadUsersError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/',
            ...options
        });
    }
    
    /**
     * Create User
     * Create new user.
     */
    public static usersCreateUser<ThrowOnError extends boolean = false>(options: Options<UsersCreateUserData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<UsersCreateUserResponse, UsersCreateUserError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Delete User Me
     * Delete own user.
     */
    public static usersDeleteUserMe<ThrowOnError extends boolean = false>(options?: Options<UsersDeleteUserMeData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).delete<UsersDeleteUserMeResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/me',
            ...options
        });
    }
    
    /**
     * Read User Me
     * Get current user.
     */
    public static usersReadUserMe<ThrowOnError extends boolean = false>(options?: Options<UsersReadUserMeData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<UsersReadUserMeResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/me',
            ...options
        });
    }
    
    /**
     * Update User Me
     * Update own user.
     */
    public static usersUpdateUserMe<ThrowOnError extends boolean = false>(options: Options<UsersUpdateUserMeData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).patch<UsersUpdateUserMeResponse, UsersUpdateUserMeError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/me',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Update Password Me
     * Update own password.
     */
    public static usersUpdatePasswordMe<ThrowOnError extends boolean = false>(options: Options<UsersUpdatePasswordMeData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).patch<UsersUpdatePasswordMeResponse, UsersUpdatePasswordMeError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/me/password',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Delete User
     * Delete a user.
     */
    public static usersDeleteUser<ThrowOnError extends boolean = false>(options: Options<UsersDeleteUserData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<UsersDeleteUserResponse, UsersDeleteUserError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/{user_id}',
            ...options
        });
    }
    
    /**
     * Read User By Id
     * Get a specific user by id.
     */
    public static usersReadUserById<ThrowOnError extends boolean = false>(options: Options<UsersReadUserByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<UsersReadUserByIdResponse, UsersReadUserByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/{user_id}',
            ...options
        });
    }
    
    /**
     * Update User
     * Update a user.
     */
    public static usersUpdateUser<ThrowOnError extends boolean = false>(options: Options<UsersUpdateUserData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).patch<UsersUpdateUserResponse, UsersUpdateUserError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/{user_id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
}

export class UtilsService {
    /**
     * Health Check
     */
    public static utilsHealthCheck<ThrowOnError extends boolean = false>(options?: Options<UtilsHealthCheckData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<UtilsHealthCheckResponse, unknown, ThrowOnError>({
            url: '/api/v1/utils/health-check/',
            ...options
        });
    }
    
}

export class AdminService {
    /**
     * Get Database Stats
     * Get database table counts and sync run statistics.
     * Only accessible by superusers.
     */
    public static adminGetDatabaseStats<ThrowOnError extends boolean = false>(options?: Options<AdminGetDatabaseStatsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<AdminGetDatabaseStatsResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/admin/database-stats',
            ...options
        });
    }
    
    /**
     * Get Recent Active Repositories
     * Get top 10 repositories with the most resource changes in the last 3 days.
     * Only accessible by superusers.
     */
    public static adminGetRecentActiveRepositories<ThrowOnError extends boolean = false>(options?: Options<AdminGetRecentActiveRepositoriesData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<AdminGetRecentActiveRepositoriesResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/admin/recent-active-repositories',
            ...options
        });
    }
    
}

export class RepositoriesService {
    /**
     * Read Repositories
     * Retrieve repositories with pagination.
     */
    public static repositoriesReadRepositories<ThrowOnError extends boolean = false>(options?: Options<RepositoriesReadRepositoriesData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<RepositoriesReadRepositoriesResponse, RepositoriesReadRepositoriesError, ThrowOnError>({
            url: '/api/v1/repositories/',
            ...options
        });
    }
    
    /**
     * Read Repository Stats
     * Get aggregate repository statistics.
     */
    public static repositoriesReadRepositoryStats<ThrowOnError extends boolean = false>(options?: Options<RepositoriesReadRepositoryStatsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<RepositoriesReadRepositoryStatsResponse, unknown, ThrowOnError>({
            url: '/api/v1/repositories/stats',
            ...options
        });
    }
    
    /**
     * Search Repositories
     * Search repositories by name, description, or topics.
     */
    public static repositoriesSearchRepositories<ThrowOnError extends boolean = false>(options: Options<RepositoriesSearchRepositoriesData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<RepositoriesSearchRepositoriesResponse, RepositoriesSearchRepositoriesError, ThrowOnError>({
            url: '/api/v1/repositories/search',
            ...options
        });
    }
    
    /**
     * Read Repository
     * Get a specific repository by ID.
     */
    public static repositoriesReadRepository<ThrowOnError extends boolean = false>(options: Options<RepositoriesReadRepositoryData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<RepositoriesReadRepositoryResponse, RepositoriesReadRepositoryError, ThrowOnError>({
            url: '/api/v1/repositories/{repository_id}',
            ...options
        });
    }
    
    /**
     * Read Repository Metrics
     * Get metrics history for a specific repository.
     */
    public static repositoriesReadRepositoryMetrics<ThrowOnError extends boolean = false>(options: Options<RepositoriesReadRepositoryMetricsData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<unknown, RepositoriesReadRepositoryMetricsError, ThrowOnError>({
            url: '/api/v1/repositories/{repository_id}/metrics',
            ...options
        });
    }
    
    /**
     * Trigger Repository Discovery
     * Trigger repository discovery task.
     */
    public static repositoriesTriggerRepositoryDiscovery<ThrowOnError extends boolean = false>(options?: Options<RepositoriesTriggerRepositoryDiscoveryData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<RepositoriesTriggerRepositoryDiscoveryResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/repositories/discover',
            ...options
        });
    }
    
    /**
     * Trigger Repository Sync All
     * Trigger sync for all repositories.
     */
    public static repositoriesTriggerRepositorySyncAll<ThrowOnError extends boolean = false>(options?: Options<RepositoriesTriggerRepositorySyncAllData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<RepositoriesTriggerRepositorySyncAllResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/repositories/sync',
            ...options
        });
    }
    
    /**
     * Trigger Repository Sync Single
     * Trigger sync for a specific repository.
     */
    public static repositoriesTriggerRepositorySyncSingle<ThrowOnError extends boolean = false>(options: Options<RepositoriesTriggerRepositorySyncSingleData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<RepositoriesTriggerRepositorySyncSingleResponse, RepositoriesTriggerRepositorySyncSingleError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/repositories/{repository_id}/sync',
            ...options
        });
    }
    
    /**
     * Block Repository
     * Block a repository from being synced.
     * Only superusers can block repositories.
     */
    public static repositoriesBlockRepository<ThrowOnError extends boolean = false>(options: Options<RepositoriesBlockRepositoryData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<RepositoriesBlockRepositoryResponse, RepositoriesBlockRepositoryError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/repositories/{repository_id}/block',
            ...options
        });
    }
    
    /**
     * Approve Repository
     * Approve a repository for syncing (removes PENDING_APPROVAL or BLOCKED status).
     * Only superusers can approve repositories.
     */
    public static repositoriesApproveRepository<ThrowOnError extends boolean = false>(options: Options<RepositoriesApproveRepositoryData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<RepositoriesApproveRepositoryResponse, RepositoriesApproveRepositoryError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/repositories/{repository_id}/approve',
            ...options
        });
    }
    
    /**
     * Read Repository Events
     * Get events for a specific repository with pagination and filters.
     */
    public static repositoriesReadRepositoryEvents<ThrowOnError extends boolean = false>(options: Options<RepositoriesReadRepositoryEventsData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<RepositoriesReadRepositoryEventsResponse, RepositoriesReadRepositoryEventsError, ThrowOnError>({
            url: '/api/v1/repositories/{repository_id}/events',
            ...options
        });
    }
    
    /**
     * Read Repository Events Daily Counts
     * Get daily event counts for a repository over the specified number of days.
     */
    public static repositoriesReadRepositoryEventsDailyCounts<ThrowOnError extends boolean = false>(options: Options<RepositoriesReadRepositoryEventsDailyCountsData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<RepositoriesReadRepositoryEventsDailyCountsResponse, RepositoriesReadRepositoryEventsDailyCountsError, ThrowOnError>({
            url: '/api/v1/repositories/{repository_id}/events/daily-counts',
            ...options
        });
    }
    
}

export class TasksService {
    /**
     * Trigger Health Check
     * Trigger a system health check task (superuser only).
     */
    public static tasksTriggerHealthCheck<ThrowOnError extends boolean = false>(options?: Options<TasksTriggerHealthCheckData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<TasksTriggerHealthCheckResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/tasks/health-check',
            ...options
        });
    }
    
    /**
     * Trigger Periodic Task
     * Trigger a periodic task by name (superuser only).
     */
    public static tasksTriggerPeriodicTask<ThrowOnError extends boolean = false>(options: Options<TasksTriggerPeriodicTaskData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<TasksTriggerPeriodicTaskResponse, TasksTriggerPeriodicTaskError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/tasks/trigger-periodic/{task_name}',
            ...options
        });
    }
    
    /**
     * Get Task Status
     * Get status of a specific task (superuser only).
     */
    public static tasksGetTaskStatus<ThrowOnError extends boolean = false>(options: Options<TasksGetTaskStatusData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<TasksGetTaskStatusResponse, TasksGetTaskStatusError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/tasks/status/{task_id}',
            ...options
        });
    }
    
    /**
     * Get Worker Status
     * Get Celery worker status and periodic tasks configuration (superuser only).
     */
    public static tasksGetWorkerStatus<ThrowOnError extends boolean = false>(options?: Options<TasksGetWorkerStatusData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<TasksGetWorkerStatusResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/tasks/workers',
            ...options
        });
    }
    
}