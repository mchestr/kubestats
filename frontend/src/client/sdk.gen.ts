// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, urlSearchParamsBodySerializer } from '@hey-api/client-fetch';
import type { LoginLoginAccessTokenData, LoginLoginAccessTokenResponses, LoginLoginAccessTokenErrors, LoginWhoamiData, LoginWhoamiResponses, AdminGetDatabaseStatsData, AdminGetDatabaseStatsResponses, RepositoriesReadRepositoriesData, RepositoriesReadRepositoriesResponses, RepositoriesReadRepositoriesErrors, RepositoriesReadRepositoryStatsData, RepositoriesReadRepositoryStatsResponses, RepositoriesGetRecentActiveRepositoriesData, RepositoriesGetRecentActiveRepositoriesResponses, RepositoriesSearchRepositoriesData, RepositoriesSearchRepositoriesResponses, RepositoriesSearchRepositoriesErrors, RepositoriesReadRepositoryData, RepositoriesReadRepositoryResponses, RepositoriesReadRepositoryErrors, RepositoriesReadRepositoryMetricsData, RepositoriesReadRepositoryMetricsResponses, RepositoriesReadRepositoryMetricsErrors, RepositoriesTriggerRepositoryDiscoveryData, RepositoriesTriggerRepositoryDiscoveryResponses, RepositoriesTriggerRepositorySyncAllData, RepositoriesTriggerRepositorySyncAllResponses, RepositoriesTriggerRepositorySyncSingleData, RepositoriesTriggerRepositorySyncSingleResponses, RepositoriesTriggerRepositorySyncSingleErrors, RepositoriesBlockRepositoryData, RepositoriesBlockRepositoryResponses, RepositoriesBlockRepositoryErrors, RepositoriesApproveRepositoryData, RepositoriesApproveRepositoryResponses, RepositoriesApproveRepositoryErrors, RepositoriesReadRepositoryEventsData, RepositoriesReadRepositoryEventsResponses, RepositoriesReadRepositoryEventsErrors, RepositoriesReadRepositoryEventsDailyCountsData, RepositoriesReadRepositoryEventsDailyCountsResponses, RepositoriesReadRepositoryEventsDailyCountsErrors, TasksTriggerPeriodicTaskData, TasksTriggerPeriodicTaskResponses, TasksTriggerPeriodicTaskErrors, TasksGetTaskStatusData, TasksGetTaskStatusResponses, TasksGetTaskStatusErrors, TasksGetWorkerStatusData, TasksGetWorkerStatusResponses, TasksListTasksData, TasksListTasksResponses, TasksListTasksErrors, EcosystemGetEcosystemStatsData, EcosystemGetEcosystemStatsResponses, EcosystemGetEcosystemStatsErrors, EcosystemGetLatestEcosystemStatsData, EcosystemGetLatestEcosystemStatsResponses, EcosystemGetEcosystemTrendsData, EcosystemGetEcosystemTrendsResponses, EcosystemGetEcosystemTrendsErrors, EcosystemTriggerEcosystemAggregationData, EcosystemTriggerEcosystemAggregationResponses, EcosystemTriggerEcosystemAggregationErrors, EcosystemGetHelmReleaseActivityData, EcosystemGetHelmReleaseActivityResponses, EcosystemGetHelmReleaseActivityErrors, KubernetesListKubernetesResourcesData, KubernetesListKubernetesResourcesResponses, KubernetesListKubernetesResourcesErrors, KubernetesListGroupedKubernetesResourcesData, KubernetesListGroupedKubernetesResourcesResponses, KubernetesListGroupedKubernetesResourcesErrors, HealthSystemHealthCheckData, HealthSystemHealthCheckResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export class LoginService {
    /**
     * Login Access Token
     * OAuth2 compatible token login, get an access token for future requests
     */
    public static loginLoginAccessToken<ThrowOnError extends boolean = false>(options: Options<LoginLoginAccessTokenData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<LoginLoginAccessTokenResponses, LoginLoginAccessTokenErrors, ThrowOnError>({
            ...urlSearchParamsBodySerializer,
            url: '/api/v1/login/access-token',
            ...options,
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                ...options.headers
            }
        });
    }
    
    /**
     * Whoami
     * Test access token
     */
    public static loginWhoami<ThrowOnError extends boolean = false>(options?: Options<LoginWhoamiData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<LoginWhoamiResponses, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/me',
            ...options
        });
    }
    
}

export class AdminService {
    /**
     * Get Database Stats
     * Get database table counts and sync run statistics.
     * Only accessible by superusers.
     */
    public static adminGetDatabaseStats<ThrowOnError extends boolean = false>(options?: Options<AdminGetDatabaseStatsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<AdminGetDatabaseStatsResponses, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/admin/database-stats',
            ...options
        });
    }
    
}

export class RepositoriesService {
    /**
     * Read Repositories
     * Retrieve repositories with pagination.
     */
    public static repositoriesReadRepositories<ThrowOnError extends boolean = false>(options?: Options<RepositoriesReadRepositoriesData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<RepositoriesReadRepositoriesResponses, RepositoriesReadRepositoriesErrors, ThrowOnError>({
            url: '/api/v1/repositories/',
            ...options
        });
    }
    
    /**
     * Read Repository Stats
     * Get aggregate repository statistics.
     */
    public static repositoriesReadRepositoryStats<ThrowOnError extends boolean = false>(options?: Options<RepositoriesReadRepositoryStatsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<RepositoriesReadRepositoryStatsResponses, unknown, ThrowOnError>({
            url: '/api/v1/repositories/stats',
            ...options
        });
    }
    
    /**
     * Get Recent Active Repositories
     * Get top 10 repositories with the most resource changes in the last 3 days.
     * Only accessible by superusers.
     */
    public static repositoriesGetRecentActiveRepositories<ThrowOnError extends boolean = false>(options?: Options<RepositoriesGetRecentActiveRepositoriesData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<RepositoriesGetRecentActiveRepositoriesResponses, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/repositories/recent',
            ...options
        });
    }
    
    /**
     * Search Repositories
     * Search repositories by name, description, or topics.
     */
    public static repositoriesSearchRepositories<ThrowOnError extends boolean = false>(options: Options<RepositoriesSearchRepositoriesData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<RepositoriesSearchRepositoriesResponses, RepositoriesSearchRepositoriesErrors, ThrowOnError>({
            url: '/api/v1/repositories/search',
            ...options
        });
    }
    
    /**
     * Read Repository
     * Get a specific repository by ID.
     */
    public static repositoriesReadRepository<ThrowOnError extends boolean = false>(options: Options<RepositoriesReadRepositoryData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<RepositoriesReadRepositoryResponses, RepositoriesReadRepositoryErrors, ThrowOnError>({
            url: '/api/v1/repositories/{repository_id}',
            ...options
        });
    }
    
    /**
     * Read Repository Metrics
     * Get metrics history for a specific repository.
     */
    public static repositoriesReadRepositoryMetrics<ThrowOnError extends boolean = false>(options: Options<RepositoriesReadRepositoryMetricsData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<RepositoriesReadRepositoryMetricsResponses, RepositoriesReadRepositoryMetricsErrors, ThrowOnError>({
            url: '/api/v1/repositories/{repository_id}/metrics',
            ...options
        });
    }
    
    /**
     * Trigger Repository Discovery
     * Trigger repository discovery task.
     */
    public static repositoriesTriggerRepositoryDiscovery<ThrowOnError extends boolean = false>(options?: Options<RepositoriesTriggerRepositoryDiscoveryData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<RepositoriesTriggerRepositoryDiscoveryResponses, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/repositories/discover',
            ...options
        });
    }
    
    /**
     * Trigger Repository Sync All
     * Trigger sync for all repositories.
     */
    public static repositoriesTriggerRepositorySyncAll<ThrowOnError extends boolean = false>(options?: Options<RepositoriesTriggerRepositorySyncAllData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<RepositoriesTriggerRepositorySyncAllResponses, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/repositories/sync',
            ...options
        });
    }
    
    /**
     * Trigger Repository Sync Single
     * Trigger sync for a specific repository.
     */
    public static repositoriesTriggerRepositorySyncSingle<ThrowOnError extends boolean = false>(options: Options<RepositoriesTriggerRepositorySyncSingleData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<RepositoriesTriggerRepositorySyncSingleResponses, RepositoriesTriggerRepositorySyncSingleErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/repositories/{repository_id}/sync',
            ...options
        });
    }
    
    /**
     * Block Repository
     * Block a repository from being synced.
     * Only superusers can block repositories.
     */
    public static repositoriesBlockRepository<ThrowOnError extends boolean = false>(options: Options<RepositoriesBlockRepositoryData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<RepositoriesBlockRepositoryResponses, RepositoriesBlockRepositoryErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/repositories/{repository_id}/block',
            ...options
        });
    }
    
    /**
     * Approve Repository
     * Approve a repository for syncing (removes PENDING_APPROVAL or BLOCKED status).
     * Only superusers can approve repositories.
     */
    public static repositoriesApproveRepository<ThrowOnError extends boolean = false>(options: Options<RepositoriesApproveRepositoryData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<RepositoriesApproveRepositoryResponses, RepositoriesApproveRepositoryErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/repositories/{repository_id}/approve',
            ...options
        });
    }
    
    /**
     * Read Repository Events
     * Get events for a specific repository with pagination and filters.
     */
    public static repositoriesReadRepositoryEvents<ThrowOnError extends boolean = false>(options: Options<RepositoriesReadRepositoryEventsData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<RepositoriesReadRepositoryEventsResponses, RepositoriesReadRepositoryEventsErrors, ThrowOnError>({
            url: '/api/v1/repositories/{repository_id}/events',
            ...options
        });
    }
    
    /**
     * Read Repository Events Daily Counts
     * Get daily event counts for a repository over the specified number of days.
     */
    public static repositoriesReadRepositoryEventsDailyCounts<ThrowOnError extends boolean = false>(options: Options<RepositoriesReadRepositoryEventsDailyCountsData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<RepositoriesReadRepositoryEventsDailyCountsResponses, RepositoriesReadRepositoryEventsDailyCountsErrors, ThrowOnError>({
            url: '/api/v1/repositories/{repository_id}/events/daily-counts',
            ...options
        });
    }
    
}

export class TasksService {
    /**
     * Trigger Periodic Task
     * Trigger a periodic task by name (superuser only).
     */
    public static tasksTriggerPeriodicTask<ThrowOnError extends boolean = false>(options: Options<TasksTriggerPeriodicTaskData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<TasksTriggerPeriodicTaskResponses, TasksTriggerPeriodicTaskErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/tasks/trigger-periodic/{task_name}',
            ...options
        });
    }
    
    /**
     * Get Task Status
     * Get status of a specific task (superuser only).
     */
    public static tasksGetTaskStatus<ThrowOnError extends boolean = false>(options: Options<TasksGetTaskStatusData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<TasksGetTaskStatusResponses, TasksGetTaskStatusErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/tasks/status/{task_id}',
            ...options
        });
    }
    
    /**
     * Get Worker Status
     * Get Celery worker status and periodic tasks configuration (superuser only).
     */
    public static tasksGetWorkerStatus<ThrowOnError extends boolean = false>(options?: Options<TasksGetWorkerStatusData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<TasksGetWorkerStatusResponses, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/tasks/workers',
            ...options
        });
    }
    
    /**
     * List Tasks
     * List Celery task metadata with optional filtering by status and time period (superuser only).
     */
    public static tasksListTasks<ThrowOnError extends boolean = false>(options?: Options<TasksListTasksData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<TasksListTasksResponses, TasksListTasksErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/tasks/tasks/',
            ...options
        });
    }
    
}

export class EcosystemService {
    /**
     * Get Ecosystem Stats
     * Get historical ecosystem statistics.
     *
     * Args:
     * skip: Number of records to skip
     * limit: Maximum number of records to return
     * days: Number of days of data to return (from today backwards)
     */
    public static ecosystemGetEcosystemStats<ThrowOnError extends boolean = false>(options?: Options<EcosystemGetEcosystemStatsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<EcosystemGetEcosystemStatsResponses, EcosystemGetEcosystemStatsErrors, ThrowOnError>({
            url: '/api/v1/ecosystem/',
            ...options
        });
    }
    
    /**
     * Get Latest Ecosystem Stats
     * Get the most recent ecosystem statistics.
     */
    public static ecosystemGetLatestEcosystemStats<ThrowOnError extends boolean = false>(options?: Options<EcosystemGetLatestEcosystemStatsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<EcosystemGetLatestEcosystemStatsResponses, unknown, ThrowOnError>({
            url: '/api/v1/ecosystem/latest',
            ...options
        });
    }
    
    /**
     * Get Ecosystem Trends
     * Get ecosystem trend data for visualization.
     *
     * Args:
     * days: Number of days of trend data to return
     */
    public static ecosystemGetEcosystemTrends<ThrowOnError extends boolean = false>(options?: Options<EcosystemGetEcosystemTrendsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<EcosystemGetEcosystemTrendsResponses, EcosystemGetEcosystemTrendsErrors, ThrowOnError>({
            url: '/api/v1/ecosystem/trends',
            ...options
        });
    }
    
    /**
     * Trigger Ecosystem Aggregation
     * Manually trigger ecosystem statistics aggregation (superuser only).
     *
     * Args:
     * target_date: Optional date string (YYYY-MM-DD). If not provided, uses current date.
     */
    public static ecosystemTriggerEcosystemAggregation<ThrowOnError extends boolean = false>(options?: Options<EcosystemTriggerEcosystemAggregationData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<EcosystemTriggerEcosystemAggregationResponses, EcosystemTriggerEcosystemAggregationErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/ecosystem/trigger-aggregation',
            ...options
        });
    }
    
    /**
     * Get Helm Release Activity
     * Get the most recent HelmRelease changes (created/modified/deleted), grouped by release name.
     * Returns the latest N releases with their change events and YAML, sorted by highest count.
     */
    public static ecosystemGetHelmReleaseActivity<ThrowOnError extends boolean = false>(options?: Options<EcosystemGetHelmReleaseActivityData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<EcosystemGetHelmReleaseActivityResponses, EcosystemGetHelmReleaseActivityErrors, ThrowOnError>({
            url: '/api/v1/ecosystem/helm-release-activity',
            ...options
        });
    }
    
}

export class KubernetesService {
    /**
     * List Kubernetes Resources
     * List Kubernetes resources with optional filtering.
     *
     * Args:
     * skip: Number of records to skip (for pagination)
     * limit: Maximum number of records to return
     * repository_id: Filter by repository ID
     * kind: Filter by resource kind
     * api_version: Filter by API version
     * namespace: Filter by namespace
     */
    public static kubernetesListKubernetesResources<ThrowOnError extends boolean = false>(options?: Options<KubernetesListKubernetesResourcesData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<KubernetesListKubernetesResourcesResponses, KubernetesListKubernetesResourcesErrors, ThrowOnError>({
            url: '/api/v1/kubernetes/resources',
            ...options
        });
    }
    
    /**
     * List Grouped Kubernetes Resources
     * List Kubernetes resources grouped by kind and name, with repository breakdowns.
     */
    public static kubernetesListGroupedKubernetesResources<ThrowOnError extends boolean = false>(options?: Options<KubernetesListGroupedKubernetesResourcesData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<KubernetesListGroupedKubernetesResourcesResponses, KubernetesListGroupedKubernetesResourcesErrors, ThrowOnError>({
            url: '/api/v1/kubernetes/resources/grouped',
            ...options
        });
    }
    
}

export class HealthService {
    /**
     * Check system health
     * Periodic task to check system health and log status.
     * Returns:
     * dict: System health status
     */
    public static healthSystemHealthCheck<ThrowOnError extends boolean = false>(options?: Options<HealthSystemHealthCheckData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<HealthSystemHealthCheckResponses, unknown, ThrowOnError>({
            url: '/health',
            ...options
        });
    }
    
}